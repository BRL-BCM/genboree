#!/bin/bash

set -e  # stop on first error
set -u  # stop when tries to use uninitialized variable

DIR_SCRIPTS="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"   # directory with scripts
source ${DIR_SCRIPTS}/conf_build.sh

set -v  # print commands

mkdir -p ${DIR_TARGET}/etc
mkdir -p ${DIR_TARGET}/lib
mkdir -p ${DIR_TARGET}/include
mkdir -p ${DIR_TARGET}/opt
mkdir -p ${DIR_TARGET}/tmp
mkdir -p ${DIR_TARGET}/var/logs

#if false; then

# copy some native libraries from builder, they depend only on kernel and glibc
# ----------- gcc libraries
func_copy_lib '/lib64/libgcc_s-4.4.7-20120601.so.1'  'libgcc_s.so.1'
func_copy_lib '/usr/lib64/libgomp.so.1.0.0'          'libgomp.so.1'
func_copy_lib '/usr/lib64/libstdc++.so.6.0.13'       'libstdc++.so.6'
func_copy_lib '/usr/lib64/libgfortran.so.3.0.0'      'libgfortran.so.3' 
# ----------- lapack / blas / atlas
func_copy_lib '/usr/lib64/atlas/libatlas.so.3.0'     'libatlas.so.3'
func_copy_lib '/usr/lib64/libblas.so.3.2.1'          'libblas.so.3'
func_copy_lib '/usr/lib64/liblapack.so.3.2.1'        'liblapack.so.3'
func_copy_lib '/usr/lib64/atlas/libptcblas.so.3.0'   'libptcblas.so.3'
func_copy_lib '/usr/lib64/atlas/libptf77blas.so.3.0' 'libptf77blas.so.3'
# ----------- OTHERS
func_copy_lib  '/usr/lib64/libgmp.so.3.5.0'  'libgmp.so.3'  # needed by Denoiser (binaries from Haskel)
func_copy_lib  '/usr/lib64/libffi.so.5.0.6'  'libffi.so.5'  # needed by Python and Denoiser (binaries from Haskel)


# create config.site for configure scripts (scripts generated by autoconf)
#echo "CPPFLAGS=-I${DIR_TARGET}/include" > ${DIR_TARGET}/share/config.site
#echo "LDFLAGS=-L${DIR_TARGET}/lib"  >> ${DIR_TARGET}/share/config.site


# 1) pkg-config # PPP: probably not needed

# 2) libz (zlib)
func_get_package "zlib-1.2.8"
cd zlib-1.2.8
CFLAGS=' -O3 -fPIC ' ./configure --shared --prefix=${DIR_TARGET}
make
make install
func_run_test "make test"
cd ..
rm -rf zlib-1.2.8*
  #Get latest tarball.
  #2.1) We install this to ensure we have the most up-to-date libz, including
       #bug fixes and security packages. The OS versions are usually out-of-date.
  #2.2) Create both shared and static libraries by building it twice.
  #2.3) CFLAGS=" -O3 -fPIC " ./configure --shared --prefix=${DIR_TARGET}
       #make
       #make test
       #make install
       #make clean
  #2.4) CFLAGS=" -O3 -fPIC " ./configure  --prefix=${DIR_TARGET}
       #make
       #make test
       #make install
  #2.5) You should get an updated gzip as well. Recent versions fix bugs related to
       #file name length and buffer overflow vulnerabilities (exploited in ftp server attacks
       #for example).
       #- Get from here (gzip.org OUT OF DATE): ftp://mirrors.kernel.org/gnu/gzip/
       #- get tar.gz
       #CFLAGS=" -O3 -fPIC " ./configure --prefix=$PREFIX
       #make
       #make check
       #make install

#4)  libbz2
func_get_package "bzip2-1.0.6"
cd bzip2-1.0.6
make all CFLAGS='-Wall -Winline -O3 -fPIC -D_FILE_OFFSET_BITS=64'  # CFLAGS from Makefile must be overwritten
make install PREFIX=${DIR_TARGET}
cd ..
rm -rf bzip2-1.0.6*


# xz - This is lzma compression
func_get_package "xz-5.0.5"     # http://tukaani.org/xz/
cd xz-5.0.5
CFLAGS='-O3 -fPIC' ./configure --prefix=${DIR_TARGET}
make
make install
func_run_test "make check"
cd ..
rm -rf xz-5.0.5*


#7) libpcre
func_get_package "pcre-8.34"
cd pcre-8.34
./configure --prefix=${DIR_TARGET} --enable-pcregrep-libz --enable-pcregrep-libbz2
make
make install
func_run_test "make check"
cd ..
rm -rf pcre-8.34*


# ncurses
func_get_package "ncurses-5.9"
cd ncurses-5.9
./configure --prefix=${DIR_TARGET} --with-shared --with-termlib --enable-widec --enable-termcap
make -j ${CORES_NUMBER}
make install
cd ..
rm -rf ncurses-5.9*
# workaround - R won't compile without that - we try to simulate old ncurses here
ln -s libncursesw.a   ${DIR_TARGET}/lib/libncurses.a
ln -s libncursesw.so  ${DIR_TARGET}/lib/libncurses.so
ln -s libncurses++w.a ${DIR_TARGET}/lib/libncurses++.a


# readline
func_get_package "readline-6.2"
cd readline-6.2
./configure --prefix=${DIR_TARGET}
make
make install
cd ..
rm -rf readline-6.2*


#16) expat
func_get_package "expat-2.1.0"
cd expat-2.1.0
CFLAGS='-O3 -fPIC' ./configure --prefix=${DIR_TARGET}
make
make install
func_run_test "make check"
cd ..
rm -rf expat-2.1.0*


# libuuid
func_get_package "libuuid-1.0.2"
cd libuuid-1.0.2
CFLAGS='-O3 -fPIC' ./configure --prefix=${DIR_TARGET}
make
make install
func_run_test "make check"
func_run_test "./test_uuid"
cd ..
rm -rf libuuid-1.0.2*


# gdbm
func_get_package "gdbm-1.11"
cd gdbm-1.11
CFLAGS='-O3 -fPIC' ./configure --prefix=${DIR_TARGET}
make
make install
func_run_test "make check"
cd ..
rm -rf gdbm-1.11*


# sqlite (needed by some python modules)
func_get_package 'sqlite-autoconf-3080600'
cd sqlite-autoconf-3080600
func_run "./configure --prefix=${DIR_TARGET}"
func_run "make -j ${CORES_NUMBER}"
func_run "make install"
func_run_test "make installcheck"
cd ..
rm -rf sqlite-autoconf-3080600*


# tcl
func_get_package "tcl8.6.1"
cd tcl8.6.1/unix
CFLAGS='-O3 -fPIC' ./configure --prefix=${DIR_TARGET}
make -j ${CORES_NUMBER}
make install
func_run_test "make test"
cd ../..
rm -rf tcl8.6.1*


# tk - PPP: it should not be needed - links X
#func_get_package "tk8.6.1"
#cd tk8.6.1/unix
#CFLAGS='-O3 -fPIC' ./configure --prefix=${DIR_TARGET}
#make
#make install
#func_run_test "make test"
#cd ../..
#rm -rf tk8.6.1*


# Berkeley DB
func_get_package "db-6.0.30.NC"
cd db-6.0.30.NC/build_unix
func_run "../dist/configure --prefix=${DIR_TARGET}"
func_run "make -j ${CORES_NUMBER}"
func_run "make install"
cd ../..
rm -rf db-6.0.30.NC*


# keyutils - PPP: probably it should come from OS
#func_get_package "keyutils-1.5.9"
#cd keyutils-1.5.9
#CFLAGS='-O3 -fPIC' ../dist/configure --prefix=${DIR_TARGET}"
#make -j ${CORES_NUMBER}"
#make install"
#cd ..
#rm -rf keyutils-1.5.9*


# gnupg (libgcrypt)
#func_get_package "gnupg-2.0.22"
#cd gnupg-2.0.22
#./configure --prefix=${DIR_TARGET} --disable-selinux-support"
#make all"
#make install"
#func_run_test "make check"
#cd ..
#rm -rf gnupg-2.0.22*


#3) openssl
func_get_package "openssl-1.0.1f"
cd openssl-1.0.1f
CFLAGS='-O3 -fPIC' ./config --prefix=${DIR_TARGET} --openssldir=${DIR_TARGET}/etc shared zlib
make        # it doesn't work with -j option !!!
make install
func_run_test "make test"
cd ..
rm -rf openssl-1.0.1f*


# Kerberos
func_get_package "krb5-1.12.1"
cd krb5-1.12.1/src
./configure --prefix=${DIR_TARGET}
make all
make install
func_run_test "make check"
cd ../..
rm -rf krb5-1.12.1*


#17)  libpng
func_get_package "libpng-1.6.10"
cd libpng-1.6.10
./configure --prefix=${DIR_TARGET}
make
make install
func_run_test "make check"
cd ..
rm -rf libpng-1.6.10*


#20) libjpeg
func_get_package "libjpeg-turbo-1.3.1"
cd libjpeg-turbo-1.3.1
./configure --prefix=${DIR_TARGET}
make
make install
func_run_test "make check"
cd ..
rm -rf libjpeg-turbo-1.3.1*


#21) JasPer (JPEG-2000 standard)
func_get_package "jasper-1.900.1"
cd jasper-1.900.1
./configure --prefix=${DIR_TARGET} --enable-shared --disable-opengl
make
make install
func_run_test "make check"
cd ..
rm -rf jasper-1.900.1*


#22) jbig-kit
func_get_package "jbigkit-2.0"
cd jbigkit
make CCFLAGS='-W -O3 -fPIC'
func_run_test "make test"
cp libjbig/libjbig.a ${DIR_TARGET}/lib/
cp libjbig/jbig.h ${DIR_TARGET}/include/
cd ..
rm -rf ./jbigkit*


#19) libtiff
func_get_package "tiff-4.0.3"
cd tiff-4.0.3
./configure --prefix=${DIR_TARGET}
make
make install
func_run_test "make check"
cd ..
rm -rf tiff-4.0.3*


#15) libfreetype (freetype2)
func_get_package "freetype-2.5.3"
cd freetype-2.5.3
./configure --prefix=${DIR_TARGET}
make
make install
func_run_test "make check"
cd ..
rm -rf freetype-2.5.3*
  #15.2) Make freetype (as well as freetype2) link available in include, for older
        #apps:
    #cd $PREFIX/include
    #ln -s freetype2/freetype freetype


#24) fontconfig
func_get_package "fontconfig-2.11.1"
cd fontconfig-2.11.1
./configure --prefix=${DIR_TARGET}
make
make install
func_run_test "make check"
cd ..
rm -rf fontconfig-2.11.1*


#6.2) libffi  - I took native version from builder
#func_get_package "libffi-3.0.9"
#cd libffi-3.0.9
#./configure --prefix=${DIR_TARGET}
#make
#make install
#func_run_test "make check"
#cd ..
#rm -rf libffi-3.0.9*


# Python
func_get_package "Python-2.7.6"
cd Python-2.7.6
func_run "./configure --prefix=${DIR_TARGET} --enable-shared"
func_run "make -j ${CORES_NUMBER}"
func_run "make install"
func_run_test "make test"
cd ..
rm -rf Python-2.7.6*

#python) setuptools
func_get_package 'setuptools-5.4.2'
cd setuptools-5.4.2
func_run "python setup.py install"
cd ..
rm -rf setuptools-5.4.2*

#python) nose
func_get_package 'nose-1.3.3'
cd nose-1.3.3
func_run "python setup.py install"
cd ..
rm -rf nose-1.3.3*

#python) numpy
func_get_package 'numpy-1.8.2'
cd numpy-1.8.2
func_run "FFLAGS='-fPIC' LDFLAGS='${LDFLAGS} -shared' python setup.py build" # because of bug in the building scripts
func_run "python setup.py install"
cd ..
rm -rf numpy-1.8.2*

#python) scipy
func_get_package 'scipy-0.14.0'
cd scipy-0.14.0
func_run "FFLAGS='-fPIC' LDFLAGS='${LDFLAGS} -shared' python setup.py build" # because of bug in the building scripts
func_run "python setup.py install"
cd ..
rm -rf scipy-0.14.0*

#python) matplotlib
func_get_package "matplotlib-1.3.1"
cd matplotlib-1.3.1
patch -p1 < ../matplotlib-1.3.1_noHomeDir.patch  # my patch - matplotlib crashes when there is no HOME directory
func_run "python setup.py build"
func_run "python setup.py install"
cd ..
rm -rf matplotlib-1.3.1*

#python) biopython
func_get_package "biopython-1.63"
cd biopython-1.63
func_run "python setup.py build"
mv ../biopython-1.63_einfo.dtd ./build/lib.linux-x86_64-2.7/Bio/Entrez/DTDs/einfo.dtd  # based on message printed by "python setup.py test"
func_run "python setup.py install"
func_run_test "python setup.py test"
cd ..
rm -rf biopython-1.63*

#python) PyYAML (needed to parse config files)
func_get_package "PyYAML-3.11"
cd PyYAML-3.11
func_run "python setup.py install"
func_run_test "python setup.py test"
cd ..
rm -rf PyYAML-3.11*

#python) SCons (needed by humann)
func_get_package 'SCons-2.3.0'
cd SCons-2.3.0
func_run "python setup.py install --standard-lib"
cd ..
rm -rf SCons-2.3.0*

#python) docutils (needed by khmer)
func_get_package 'docutils-0.12'
cd docutils-0.12
func_run "python setup.py build"
func_run "python setup.py install"
cd ..
rm -rf docutils-0.12*

#python) MarkupSafe (needed by khmer)
func_get_package 'MarkupSafe-0.23'
cd MarkupSafe-0.23
func_run "python setup.py build"
func_run "python setup.py install"
cd ..
rm -rf MarkupSafe-0.23*

#python) screed (needed by khmer)
func_get_package 'screed-0.7.1'
cd screed-0.7.1
func_run "python setup.py build"
func_run "python setup.py install"
cd ..
rm -rf screed-0.7.1*

#python) Jinja2 (needed by Sphinx)
func_get_package 'Jinja2-2.7.3'
cd Jinja2-2.7.3
func_run "python setup.py build"
func_run "python setup.py install"
cd ..
rm -rf Jinja2-2.7.3*

#python) Pygments (needed by Sphinx)
func_get_package 'Pygments-1.6-py2.7.egg'
func_run 'easy_install Pygments-1.6-py2.7.egg'
rm Pygments-1.6-py2.7.egg

#python) Sphinx (needed by khmer)
func_get_package 'Sphinx-1.2.2'
cd Sphinx-1.2.2
func_run "python setup.py build"
func_run "python setup.py install"
cd ..
rm -rf Sphinx-1.2.2*

#python) setuptools_git (needed by khmer)
func_get_package 'setuptools-git-1.0'
func_run 'easy_install setuptools-git-1.0'
rm -rf setuptools-git-1.0*

#python) khmer (needed by wgsMicrobiomePipeline)
func_get_package 'khmer-2012-paper-diginorm'
cd khmer-2012-paper-diginorm
patch -p1 < ../khmer-2012-paper-diginorm_setup.patch  # removes argparse from dependencies (it is part of stdlib in Python 2.7)
func_run "python setup.py build"
func_run "python setup.py install"
cd ..
rm -rf khmer-2012-paper-diginorm*

#python) PyCogent
func_get_package 'PyCogent-1.5.3'
cd PyCogent-1.5.3
func_run "python setup.py build"
func_run "python setup.py install"
func_run_test 'sh run_tests'
cd ..
rm -rf PyCogent-1.5.3*

#python) pystache
func_get_package 'pystache-0.5.4'
cd pystache-0.5.4
func_run "python setup.py build"
func_run "python setup.py install"
func_run_test 'python test_pystache.py'
cd ..
rm -rf pystache-0.5.4*

#python) Rx
func_get_package 'Rx-1.2.6'
cd Rx-1.2.6
func_run "python setup.py build"
func_run "python setup.py install"
cd ..
rm -rf Rx-1.2.6*


#8) libxml2
func_get_package "libxml2-2.9.1"
cd libxml2-2.9.1
func_run "./configure --prefix=${DIR_TARGET}"
func_run "make -j ${CORES_NUMBER}"
func_run "make install"
func_run_test "make check"
cd ..
rm -rf libxml2-2.9.1*


#9) libxslt
func_get_package "libxslt-1.1.28"
cd libxslt-1.1.28
func_run "./configure --prefix=${DIR_TARGET} --without-crypto"   # gnupg must be compiled to use crypto
func_run "make -j ${CORES_NUMBER}"
func_run "make install"
func_run_test "make check"
cd ..
rm -rf libxslt-1.1.28*
  #9.2) NOTE: you may need an updated libgcrypt for the latest version if you get errors during 'make'.
       #This is a whole suite of dependent libs.:
    #9.2.1) libgpg-error: (not libgpg [gnupg], which is a not-fun package install)
      ## Download libgpg-error using FTP link here: http://www.gnupg.org/download/
      #CFLAGS=" -O3 -fPIC " ./configure --prefix=$PREFIX
      #make
      #make check
      #make install
    #9.2.2) libgcrypt:
      ## Download libgcrypt using FTP link here: http://www.gnupg.org/download/
      #CFLAGS=" -O3 -fPIC " ./configure --prefix=$PREFIX
      #make
      #make check
      #make install


#28) ruby
func_get_package "ruby-1.8.7-p358"                    #ftp://ftp.ruby-lang.org/pub/ruby/
cd ruby-1.8.7-p358
# Patch Ruby to Use Fibers
# The default functionality of Thin currently buffers all responses into memory, making requests
# for large responses unreasonable, because memory usage can get out of control, and
# the connection will most likely time out.
# This patch enables Thin to handle concurrent 'large' requests.  Specifically, when the Rack
# response body (@resp.body) is some kind of IO object (IO, File, StringIO) and not a String or Array,
# the output will be streamed in chunks.
# Project documentation is here: http://timetobleed.com/fibers-implemented-for-ruby-1867/
func_get_package "ruby-1.8.7-fibers-187p249.patch"
patch -p1 < ruby-1.8.7-fibers-187p249.patch
# Patch Ruby to Work with new OpenSSL (1.0.1e)
# PPP: I have prepared the patch below by gathering stuff from described Ruby's issues (mainly here: https://bugs.ruby-lang.org/issues/)
func_get_package "ruby-1.8.7-openssl.patch"
patch -p1 < ruby-1.8.7-openssl.patch
# Patch for various tests failures
func_get_package "ruby-1.8.7-tests.patch"
patch -p1 < ruby-1.8.7-tests.patch
# My patch for changing default ruby's subshell from /bin/sh to bash from PATH
patch -p1 < ../ruby-1.8.7-p358_bash_as_subshell.patch
# Configure & Build
func_run "CFLAGS=' -O3 -fPIC ' CXXFLAGS=' -O3 -fPIC ' ./configure --prefix=${DIR_TARGET} --enable-shared --disable-pthread"
func_run "make -j ${CORES_NUMBER}"
func_run "make install"
func_run_test "make check"
# Finish
cd ..
rm -rf ruby-1.8.7-p358*


#5) libiconv - needed by libglib, it is already in glibc, but libglib cannot find the native version
func_get_package "libiconv-1.14"
cd libiconv-1.14
func_run "./configure --prefix=${DIR_TARGET}"
func_run "make -j ${CORES_NUMBER}"
func_run "make install"
func_run_test "make check"
cd ..
rm -rf libiconv-1.14*


#6) libglib (i.e. glib...not gtk though)
func_get_package "glib-2.40.0"
cd glib-2.40.0
patch -p1 < ../glib-2.40.0-fix-mapped-file-ptest.patch
func_run "./configure --prefix=${DIR_TARGET} --disable-selinux --with-libiconv"
func_run "make -j ${CORES_NUMBER}"
func_run "make install"
#func_run_test "make check"   # produces 8 "missing test plan" errors on minimal CentOS
cd ..
rm -rf glib-2.40.0*


# pixman
func_get_package "pixman-0.32.4"
cd pixman-0.32.4
func_run "./configure --prefix=${DIR_TARGET}"
func_run "make"
func_run "make install"
func_run_test "make check"
cd ..
rm -rf pixman-0.32.4*


# cairo
func_get_package "cairo-1.12.16"
cd cairo-1.12.16
func_run "./configure --prefix=${DIR_TARGET} --enable-xlib=no --enable-xlib-xrender=no --enable-xcb=no --enable-xcb-shm=no"
func_run "make -j ${CORES_NUMBER}"
func_run "make install"
#func_run_test "make check"   # PPP: it takes a lot of time and fails
cd ..
rm -rf cairo-1.12.16*


# lcms
func_get_package "lcms2-2.6"
cd lcms2-2.6
func_run "./configure --prefix=${DIR_TARGET}"
func_run "make -j ${CORES_NUMBER}"
func_run "make install"
func_run_test "make check"
cd ..
rm -rf lcms2-2.6*


#26) ghostscript
func_get_package "ghostscript-9.14"
cd ghostscript-9.14
func_run "./configure --prefix=${DIR_TARGET} --disable-cups --disable-gtk --without-x"
func_run "make -j ${CORES_NUMBER}"
func_run "make install"
func_run_test "make check"
cd ..
rm -rf ghostscript-9.14*
  #26.1) Get two source tarballs, one the src and the other the fonts from
        #sourceforge. Example
        #(your latest version will be newer though):
        #- ghostscript-8.61.tar.gz
        #- ghostscript-fonts-std-8.11.tar.gz
  #26.2) Make a fonts directory to deploy downloaded fonts to:
    #mkdir -p ${DIR_TARGET}/share/ghostscript/fonts/
    #cp fonts/* ${DIR_TARGET}/share/ghostscript/fonts/
  #26.3) Set your GS_FONTPATH directory (now and in .bashrc):
    #export GS_FONTPATH=${DIR_TARGET}/share/ghostscript/fonts
  #26.4) install:
    ## If ./autogen.sh exists:
    #LDFLAGS="" CPPFLAGS=""  CFLAGS=" -O3 -fPIC  " ./autogen.sh --prefix=${DIR_TARGET} --disable-cups --enable-cups=no
    ## Else:
    #LDFLAGS="" CPPFLAGS=""  CFLAGS=" -O3 -fPIC  " ./configure --prefix=${DIR_TARGET} --disable-cups --enable-cups=no
    ## End
    #make
    #make install
  #26.5) Test
    #gs examples/alphabet.ps
      #OR
    #gs -sDEVICE=nullpage # for no-X machines
      #OR
    #DISPLAY=10.10.63.217:0.0 ./bin/gs examples/alphabet.ps # where DISPLAY
                                                           ## points to your X
                                                           ## machine
  #26.6) Update .basshrc and set env value now:
    #export GS_FONTPATH=${DIR_TARGET}/share/ghostscript/fonts


#29) ImageMagick
func_get_package "ImageMagick-6.8.8-10"
cd ImageMagick-6.8.8-10
func_run "./configure --prefix=${DIR_TARGET} --without-perl --without-x"
func_run "make -j ${CORES_NUMBER}"
func_run "make install"
func_run_test "make check"
cd ..
rm -rf ImageMagick-6.8.8-10*
 #29.1) Build:
    #- Turn off Perl as shown, unless your perl is up to date or if you get
          #errors during 'make check'
    #CFLAGS=" -O3 -fPIC " CXXFLAGS="-O3 -fPIC " ./configure --prefix=${DIR_TARGET} --without-perl \
      #--with-gs-font-dir=${DIR_TARGET}/share/ghostscript/fonts
    #make
  #29.2) Fix, if necessary:
    #- Check config/type.xml
    #- Make sure it points to type-ghostscript.xml in the <typemap> <include> tag
      #(in at least a few releases it points to type-ghostscript.mgk, which doesn't exist!)
  #29.3) Install:
    #make check
    #make install


#18) libgsl
func_get_package "gsl-1.16"
cd gsl-1.16
./configure --prefix=${DIR_TARGET}
make -j ${CORES_NUMBER}
make install
func_run_test "make check"
cd ..
rm -rf gsl-1.16*


# eigen       # TODO - newer cmake is needed (>=2.8.2)
# func_get_package "eigen-3.2.1"
# cd eigen-eigen-6b38706d90a9
# mkdir build
# cd build
# cmake .. 
# -DCMAKE_BUILD_TYPE=Release
# -DCMAKE_INSTALL_PREFIX=${DIR_TARGET}
# -DCMAKE_VERBOSE_MAKEFILE=ON"
# make -j ${CORES_NUMBER}"
# make install"
# func_run_test "make check"
# cd ..
# rm -rf eigen-3.2.1*  eigen-eigen-6b38706d90a9


# libSElinux  PPP: probably not needed
#func_get_package "libselinux-2.2.2"
#cd libselinux-2.2.2
#CFLAGS='-O3 -fPIC' ../dist/configure --prefix=${DIR_TARGET}"
#make -j ${CORES_NUMBER}"
#make install"
#cd ..
#rm -rf libselinux-2.2.2*


#10) libssh2
  #Get latest tarball
  #10.1) install:
    #CFLAGS=" -O3 -fPIC " ./configure --prefix=$PREFIX
    #make
    #make check # Don't worry if auth tests fail...
    #make install

#11) libcurl
  #Get latest tarball
  #Needs recent libssh2
  #11.1) install:
    #CFLAGS=" -O3 -fPIC " ./configure --prefix=${DIR_TARGET}
    #make
    #make check
    #make install
  #11.2) If you need a newer libldap to compile this against, recommend building without slapd:
    #Get latest tarball
    #11.2.1) install:
      #CFLAGS=" -O3 -fPIC " ./configure --prefix=${DIR_TARGET} --disable-hdb --disable-slapd
      #make depend
      #make
      #make test
      #make check
      #make install

#12) git
  #Get latest stable tar.bz2 (or download as .zip from github source repo site tehy have)
  #Needs a recent libcurl linked against latest libiconv (OS distro's of both will be too old)
  #12.1) install:
    ## this may be necessary first if not ./configure already
    #make configure
    ## now do configure-based install
    #CFLAGS=" -O2 -fPIC " ./configure --prefix=$PREFIX --with-iconv=$PREFIX --without-python
    #make all
    #make test
    #make install

#13) libunwind (OPTIONAL - not needed unless memory *profiling* with gperf (don't!))
  #11.1) Get latest nightly snapshot USING GIT (do NOT use old stable version)
  #11.2) install:
    #CFLAGS="-fPIC " ./configure --prefix=${DIR_TARGET}
    #make
    #make check # Some tests will fail, it is known/expected
    #make install

#D 14) Google performance tools (for tcmalloc!) - used for MySQL
  #Download the tarball from
  #http://code.google.com/p/google-perftools/
  #- We get this for tcmalloc. If you want to use the CPU & Heap Profilers, make
    #sure to read the INSTALL and README about x86_64 caveats and identify if you
    #have an affected system or not (and what to do); this is becoming less and
    #less of a likely issue with latest distros using latest 2.6.18+ kernels and
    #having fixed their libc's to avoid the Linux bug.
  #- tcmalloc is unaffected by the Linux bug.
  #- Install libunwind FIRST!! (Not actually necessary)
  #14.1 Build ONLY tcmallaoc_minimal (we want to avoid the profiler and whatnot at this time):
      #CXXFLAGS=" -fPIC -O2 " CFLAGS=" -fPIC -O2 " ./configure --prefix=${DIR_TARGET}
      ## Very specific make targets
      #make tcmalloc_minimal_unittest tcmalloc_minimal_large_unittest \
            #addressmap_unittest atomicops_unittest frag_unittest \
            #low_level_alloc_unittest markidle_unittest memalign_unittest \
            #packed_cache_test system_alloc_unittest \
            #thread_dealloc_unittest
  #14.2) Run generated tests:
      #for xx in tcmalloc_minimal_unittest tcmalloc_minimal_large_unittest \
            #addressmap_unittest atomicops_unittest frag_unittest \
            #low_level_alloc_unittest markidle_unittest memalign_unittest \
            #packed_cache_test system_alloc_unittest \
            #thread_dealloc_unittest
      #do
        #echo $xx
        #./$xx
      #done
  #14.3) Deploy libs manually from the gperftools/ dir (parent of .libs):
      #rm -f ${DIR_TARGET}/lib/libtcmalloc*
      #cp -fP ./.libs/lib* ${DIR_TARGET}/lib/
      ## Now fix the symlinked parents files (broken) by copying the actual files overtop the symlinks:
      #for xx in *la; do rm -f ${DIR_TARGET}/lib/$xx; cp $xx ${DIR_TARGET}/lib/$xx; done
  #14.4) Can now link against tcmalloc (used instead of malloc) by doing:
      #gcc [...] -ltcmalloc_minimal
      ## or with a LDFLAGS set


#23) libwmf (OPTIONAL - probably skip)
  #Get & unpack latest tarball
  #23.1) install:
    #CFLAGS=" -O3 -fPIC " ./configure --prefix=${DIR_TARGET}
    #make
    #make install


#25) libgd
func_get_package "libgd-2.1.0"
cd libgd-2.1.0
func_run "./configure --prefix=${DIR_TARGET} --without-x"
func_run "make -j ${CORES_NUMBER}"
func_run "make install"
func_run_test "make check"
cd ..
rm -rf libgd-2.1.0*
  #Get & unpacklatest tarball
  #25.1) Compile this after you've compiled the other libraries above, then
        #point ./configure at those latest versions of the other libraries as
        #shown below.
  #25.2) install:
       #CFLAGS=" -O3 -fPIC  " ./configure --prefix=${DIR_TARGET} \
           #--with-png=${DIR_TARGET}/lib \
         #--with-freetype=${DIR_TARGET}/lib \
         #--with-jpeg=${DIR_TARGET}/lib
       #make
       #make check
       #make install
  #25.3) If install gives some errors, they are probably ICONV related. Install
    #as described above or then try ONE of these (try in order):
    #25.3.1) Run automake and -then- start at 25.2 again
    #25.3.2) Run this after configure but before make:
      #/bin/sh <pwd>/config/missing --run autoheader
    #25.3.3) Do this before the configure step (and reconfig):
      #sed -i -e 's/@LIBICONV@//' config/gdlib-config.in

#27) gnuplot
  #Get & unpack latest tarball
  #27.1) install:
    #CFLAGS=" -O3 -fPIC " ./configure --prefix=${DIR_TARGET}
    #make
    #make check
    #make install
  #27.2) If install gives some errors, try this after the configure step and re-make:
    #find . -name Makefile -exec sed -i -e 's/@LIBICONV@//' {} \;


# --- TODO - remove if not needed
#atk ) atk  (needed by gtk)
#func_get_package "atk-2.12.0"
#cd atk-2.12.0
#func_run "./configure --prefix=${DIR_TARGET} --disable-libtool-lock --disable-glibtest --disable-gtk-doc-html"
#func_run "make -j ${CORES_NUMBER}"
#func_run "make install"
#func_run_test "make check"
#cd ..
#rm -rf atk-2.12.0*
#------
#pango ) harfbuzz  (needed by pango)
#func_get_package "harfbuzz-0.9.28"
#cd harfbuzz-0.9.28
#func_run "./configure --prefix=${DIR_TARGET} --disable-libtool-lock --disable-gtk-doc-html"
#func_run "make -j ${CORES_NUMBER}"
#func_run "make install"
#func_run_test "make check"
#cd ..
#rm -rf harfbuzz-0.9.28*
#------
#pango ) pango  (needed by gtk)
#func_get_package "pango-1.36.3"
#cd pango-1.36.3
#func_run "./configure --prefix=${DIR_TARGET} --disable-libtool-lock --disable-gtk-doc-html"
#func_run "make -j ${CORES_NUMBER}"
#func_run "make install"
#func_run_test "make check"
#cd ..
#rm -rf pango-1.36.3*
#------
#atk ) gdk-pixbuf (needed by gtk)
#func_get_package "gdk-pixbuf-2.30.7"
#cd gdk-pixbuf-2.30.7
#func_run "./configure --prefix=${DIR_TARGET} --without-x11 --disable-libtool-lock --disable-glibtest --disable-gtk-doc-html"
#func_run "make -j ${CORES_NUMBER}"
#func_run "make install"
#func_run_test "make check"
#cd ..
#rm -rf gdk-pixbuf-2.30.7*
#------ end of TODO


#30) R
# --- new version
func_get_package "R-3.1.3"
cd R-3.1.3
func_run "./configure --prefix=${DIR_TARGET} --libdir=${DIR_TARGET}/lib --without-x --enable-R-shlib --with-system-zlib --without-readline"
func_run "make -j ${CORES_NUMBER}"
func_run "make install"
func_run_test "unset R_HOME; make check"
cd ..
rm -rf R-3.1.3*  
# --- old version
#func_get_package "R-2.15.3"
#cd R-2.15.3
#func_run "./configure --prefix=${DIR_TARGET} --libdir=${DIR_TARGET}/lib --without-x --enable-R-shlib --with-system-zlib --with-system-pcre"
#func_run "make -j ${CORES_NUMBER}"
#func_run "make install"
#func_run_test "unset R_HOME; make check"
#cd ..
#rm -rf R-2.15.3*  


#31) Java
func_get_package "jdk-1.5.0_22"        # TODO - java runtime environment should be enough
mv jdk1.5.0_22 ${DIR_TARGET}/jdk
rm -rf jdk-1.5.0_22*


#32) Graphviz (OPTIONAL - skip unless finally tools/libs making use of it)
  #Sameer: also install webdot?
  #Get latest working development tarballs.
  #Note: you must have freetype, libpng, gd, etc, already installed (you did that
  #already, based on entries above, right?)

  #32.1) install (for both):
    ## Graphviz configure is one of the broken ones that doesn't look for /usr/X11R6/lib64 for libs.
    ## So you need this on systems that have both .../lib and .../lib64 there, else no build.
    #LDFLAGS="" CFLAGS="" CPPFLAGS="" LD_LIBRARY_PATH="" ./configure --prefix=${DIR_TARGET} \
    #--with-freetype=${DIR_TARGET}/lib  --with-pnglibdir=${DIR_TARGET}/lib \
    #--with-pngincludedir=${DIR_TARGET}/include/ --with-libgd=yes \
    #--with-gdincludedir=${DIR_TARGET}/include/ \
    #--with-gdlibdir=${DIR_TARGET}/lib -disable-tcl \
    #--with-fontconfigincludedir=${DIR_TARGET}/include/ \
    #--with-fontconfiglibdir=${DIR_TARGET}/lib \
    #--with-jpegincludedir=${DIR_TARGET}/include/ \
    #--with-jpeglibdir=${DIR_TARGET}/lib \
    #--with-pngincludedir=${DIR_TARGET}/include/ -with-pnglibdir=${DIR_TARGET}/lib
    #make
    #make install
  #32.2) If install gives some errors, try this after the configure step and re-make:
    #find . -name Makefile -exec sed -i -e 's/@LIBICONV@//' {} \;
  #32.3) If you have problems with installing webdot, then edit the Makefile.in
        #and change all /var references to ${DIR_TARGET}/var
  #32.4) You may also need to add a -lgd to the gcc command within one of the
    #contrib subdirs. Fix the failed command and rerun it manual. Then continue make.
    #- Usually this is contrib/diffimg/ which fails to have -lgd, so repeat the failed
      #gcc command within this dir but with -lgd tacked on the end
    #- Then go back up the to the top dir and re-make

#33) html2ps
  #Get & unpack latest tarball
  #33.1) install:
    #./install
    #(performs text-based interactive installation, specify the value of
    #${DIR_TARGET} as installation directory and use 'letter' for size)


#34) primer3
func_get_package "primer3-src-2.3.6"
cd primer3-2.3.6/src
make
func_run_test "make test"
cp primer3_core oligotm ntdpal long_seq_tm_test ${DIR_TARGET}/bin
cd ../..
rm -rf primer3-*


#36) file utility (if not already installed; must be version 4.13 for magic file compatibility)
  #Get the version from //brl-depot/brl/3rdPartyTools/file-4.13.tar.gz
  #36.1) install:
    #CFLAGS=" -O3 -fPIC " ./configure --prefix=${DIR_TARGET}
    #make
    #make install


#37) apache-ant
func_get_package "apache-ant-1.9.3"     # from ant.apache.org
mv apache-ant-1.9.3 ${DIR_TARGET}/ant
rm -rf apache-ant-1.9.3*
#Get & unpack latest apache-ant src from ant.apache.org    # TODO - do I need these ?


#37.1) Download extra JAR files for optional dependencies (well, JUnit is required to complete the install) 
mkdir -p ${DIR_TARGET}/apache/htdocs/common/lib
# TODO - do I need these - required jars are commited in the repository
#func_get_package "bcel-5.2"
#mv ./bcel-5.2/bcel-5.2.jar ${DIR_TARGET}/apache/htdocs/common/lib/
#rm -rf bcel-5.2*
#func_get_package "commons-net-2.2"
#mv ./commons-net-2.2/commons-net-2.2.jar ${DIR_TARGET}/apache/htdocs/common/lib/
#rm -rf commons-net-2.2*
#func_get_package "jakarta-oro-2.0.8"   # from attic.apache.org
#mv ./jakarta-oro-2.0.8/jakarta-oro-2.0.8.jar ${DIR_TARGET}/apache/htdocs/common/lib/
#rm -rf jakarta-oro-2.0.8*
#func_get_package "jakarta-regexp-1.5"  # from attic.apache.org
#mv ./jakarta-regexp-1.5/jakarta-regexp-1.5.jar ${DIR_TARGET}/apache/htdocs/common/lib/
#rm -rf jakarta-regexp-1.5*
#func_get_package "junit-4.10"
#mv junit-4.10.jar ${DIR_TARGET}/apache/htdocs/common/lib/

   #and put them in - TODO - remove this description?
         #lib/optional of the src tree (put them in your CLASSPATH location also):
        #- junit (1 jar)
        #- jakarta-oro (1 jar)
        #- jakarta-regexp (1 jar)
        #- commons-net (1 jar) # current version (1.8.X seems to need commons-net 2.XX series...3.xx will fail)
        #- commons-logging
        #- apache bcel
        #- xalan (5 jars)
        #. put them in ${DIR_TARGET}/lib/jars/
        #. also put these in the lib/optional/ sub-dir of your ant src tree
        #. edit lib/libraries.properties
          #- put in correct versions for jars listed above
          #- UNCOMMENT all other [optional] jars
          #- Make sure to also install jakarta-oro,commons-net,JUnit,xalan and add all the corresponding
            #JAR files to CLASSPATH environmental variable. Otherwise it won't run correctly post-install.
          #- Using your ant version for 'XXX', do:
              #export JAVA_HOME=${DIR_TARGET}/jdk
              #export ANT_HOME=${DIR_TARGET}/ant
  #37.2) Create ${DIR_TARGET}/apache-ant-XXX, such as:
    #mkdir ${DIR_TARGET}/apache-ant-1.7.1
  #37.3) Link ${DIR_TARGET}/apache-ant-<ver> to ${DIR_TARGET}/ant
    #ln -s ${DIR_TARGET}/apache-ant-XXX ${DIR_TARGET}/ant
  #37.4) Set ANT_HOME=${DIR_TARGET}/ant
  #37.5) install (if doing from source [recommend binary]):
    #sh build.sh -Ddist.dir=${DIR_TARGET}/apache-ant-XXX dist
    #sh build.sh install
    #- You may get a bunch of [javadoc] errors related to optional package/jars you did not build ant with
    #- Verify they are for things you didn't enable like jai, mail, log4j, etc
      #. The "package .* does not exist" key phrase can help when looking through the error messages.
    #- Ignore them unless they involve a package that would be found in a jar above
    #- Build should succeed even with these errors


#38) apache commons libraries
# TODO - do I need these - required jars are commited in the repository
#func_get_package "commons-codec-1.6"
#func_get_package "commons-collections4-4.0"
#func_get_package "commons-dbcp-1.3"
#func_get_package "commons-el-1.0"
#func_get_package "commons-lang-2.6"
#func_get_package "commons-logging-1.1.3"
#func_get_package "commons-pool-1.6"
#func_get_package "commons-validator-1.4.0"
#mv ./commons-codec-1.6/*.jar        ${DIR_TARGET}/apache/htdocs/common/lib/
#mv ./commons-collections4-4.0/*.jar ${DIR_TARGET}/apache/htdocs/common/lib/
#mv ./commons-dbcp-1.3/*.jar         ${DIR_TARGET}/apache/htdocs/common/lib/
#mv ./commons-el-1.0/*.jar           ${DIR_TARGET}/apache/htdocs/common/lib/
#mv ./commons-lang-2.6/*.jar         ${DIR_TARGET}/apache/htdocs/common/lib/
#mv ./commons-logging-1.1.3/*.jar    ${DIR_TARGET}/apache/htdocs/common/lib/
#mv ./commons-pool-1.6/*.jar         ${DIR_TARGET}/apache/htdocs/common/lib/
#mv ./commons-validator-1.4.0/*.jar  ${DIR_TARGET}/apache/htdocs/common/lib/
#rm -rf commons-*


#39) pigz (parallel gzip/gunzip)
func_get_package "pigz-2.3.1"    # from: http://zlib.net/pigz/
cd pigz-2.3.1
make
cp pigz unpigz ${DIR_TARGET}/bin/
cd ..
rm -rf pigz-2.3.1*


#40) pbzip2 (parallel bzip2/bunzip2)
func_get_package "pbzip2-1.1.8"    # from: http://compression.ca/pbzip2/
cd pbzip2-1.1.8
patch -p1 < ../pbzip2-1.1.8.patch  # Patch Makefile to set LDFLAGS properly (by PPP)
make
make install PREFIX=${DIR_TARGET}
rm ${DIR_TARGET}/bin/pbunzip2  ${DIR_TARGET}/bin/pbzcat # Incorrect soft links created by "make install" (absolute paths)
cd ..
rm -rf pbzip2-1.1.8*


#44) pxz
func_get_package "pxz-4.999.9beta.20091201"   # from http://jnovy.fedorapeople.org/pxz/
cd pxz-4.999.9beta
make all
make install  BINDIR=${DIR_TARGET}/bin  MANDIR=${DIR_TARGET}/share/man
cd ..
rm -rf pxz-4.999.9beta*


# dos2unix
func_get_package "dos2unix-6.0.5"
cd dos2unix-6.0.5
make all     prefix=${DIR_TARGET}
make install prefix=${DIR_TARGET}
cd ..
rm -rf dos2unix-6.0.5*


# bedtools
func_get_package "bedtools-2.18.2"
cd bedtools-2.18.2
func_run "make all -j ${CORES_NUMBER}"
func_run_test "make test"
cp  ./bin/*  ${DIR_TARGET}/bin/
cd ..
rm -rf bedtools-2.18.2*


# pash 3
func_get_package "pash-3.0.6.2a"
cd pash-3.0.6.2a
func_run "make all"
func_run "make install INSTALLDIR=${DIR_TARGET}/bin"
cd ..
rm -rf pash-3.0.6.2*


# perl
func_get_package "perl-5.20.0"
cd perl-5.20.0
func_run "./Configure -des -Dprefix=${DIR_TARGET}"
func_run "make all -j ${CORES_NUMBER}"
func_run "make install"
func_run_test "make test"
cd ..
rm -rf perl-5.20.0*


#perl) DBI (needed by amos)
func_get_package 'DBI-1.631'
cd DBI-1.631
func_run "perl Makefile.PL"
func_run "make -j ${CORES_NUMBER}"
func_run "make install"
func_run_test "make test"
cd ..
rm -rf DBI-1.631*


#perl) Capture::Tiny (needed by Config::AutoConf)
func_get_package 'Capture-Tiny-0.24'
cd Capture-Tiny-0.24
func_run "perl Makefile.PL"
func_run "make -j ${CORES_NUMBER}"
func_run "make install"
func_run_test "make test"
cd ..
rm -rf Capture-Tiny-0.24*


#perl) Config::AutoConf (needed to build List::MoreUtils)
func_get_package 'Config-AutoConf-0.305'
cd Config-AutoConf-0.305
func_run "perl Makefile.PL"
func_run "make -j ${CORES_NUMBER}"
func_run "make install"
func_run_test "make test"
cd ..
rm -rf Config-AutoConf-0.305*


#perl) List::MoreUtils (needed by Statistics::Descriptive)
func_get_package 'List-MoreUtils-0.400_001'
cd List-MoreUtils-0.400
func_run "perl Makefile.PL"
func_run "make -j ${CORES_NUMBER}"
func_run "make install"
func_run_test "make test"
cd ..
rm -rf List-MoreUtils-0.400*


#perl) Statistics::Descriptive (needed by amos)
func_get_package 'Statistics-Descriptive-3.0607'
cd Statistics-Descriptive-3.0607
func_run "perl Build.PL"
func_run "./Build"
func_run "./Build install"
func_run_test "./Build test"
cd ..
rm -rf Statistics-Descriptive-3.0607*


#perl) XML::Parser (needed by amos)
func_get_package 'XML-Parser-2.41'
cd XML-Parser-2.41
func_run "perl Makefile.PL"
func_run "make -j ${CORES_NUMBER}"
func_run "make install"
func_run_test "make test"
cd ..
rm -rf XML-Parser-2.41*


# modules
func_get_package "modules-3.2.10"
cd modules-3.2.10
# there is no tclx, but --with-tclx-ver parameter must be used, in other case the ./configure fails
func_run "./configure --prefix=${DIR_TARGET} --without-x 
--with-tcl=${DIR_TARGET}/lib --with-tcl-ver=8.6 
--without-tclx               --with-tclx-ver=8.6 
--with-tmp-dir=${DIR_TARGET}/tmp 
--with-man-path=${DIR_TARGET}/share/man 
--with-etc-path=${DIR_TARGET}/etc 
--with-skel-path=${DIR_TARGET}/etc/skel"
func_run "make all CFLAGS='-O2 -DUSE_INTERP_ERRORLINE'"
func_run "make install"
ln -s ./3.2.10  ${DIR_TARGET}/Modules/default
cd ..
rm -rf modules-3.2.10*


#python) rpy2
func_get_package 'rpy2-2.4.2'
cd rpy2-2.4.2
func_run 'python setup.py install'
# func_run_test 'python -m rpy2.tests' # test suit doesn't work ...
cd ..
rm -rf rpy2-2.4.2*


# tcsh (needed by MUMmer)
func_get_package 'tcsh-6.18.01'
cd tcsh-6.18.01
func_run "LIBS=-ltinfow ./configure --prefix=${DIR_TARGET}"
func_run "make all -j ${CORES_NUMBER}"
func_run "make install"
cd ..
rm -rf tcsh-6.18.01*
ln -s tcsh ${DIR_TARGET}/bin/csh


# atlas (needed by scipy) - installed from repo
#func_get_package 'atlas3.10.2'
#cd ATLAS
#func_get_package 'lapack-3.5.0'
#mkdir my_build
#cd my_build
#func_run "../configure --shared --with-netlib-lapack-tarfile=../lapack-3.5.0.tgz -b 64 -V 384 -A 14 -t 0"  # sse1+sse2, x86SSE2, no multithreading
#func_run "make build"
#func_run "make check"
#func_run "make install"
#cd ../..
#rm -rf ATLAS atlas3.10.2*


# libbios (needed by RSeqTools, http://homes.gersteinlab.org/people/as2665/)
func_get_package 'libbios-1.0.0'
cd libbios-1.0.0
func_run "./configure --prefix=${DIR_TARGET}"
func_run "make all -j ${CORES_NUMBER}"
func_run "make install"
cd ..
rm -rf libbios-1.0.0*


# libmrf (needed by RSeqTools, http://homes.gersteinlab.org/people/as2665/)
func_get_package 'libmrf-0.7.0'
cd libmrf-0.7.0
func_run "./configure --prefix=${DIR_TARGET}"
func_run "make all -j ${CORES_NUMBER}"
func_run "make install"
cd ..
rm -rf libmrf-0.7.0*


# libgtextutils (needed by fastx-toolkit, http://hannonlab.cshl.edu/fastx_toolkit/download.html) - fastx-toolkit probably not needed
#func_get_package 'libgtextutils-0.7'
#cd libgtextutils-0.7
#func_run "./configure --prefix=${DIR_TARGET}"
#func_run "make all -j ${CORES_NUMBER}"
#func_run "make install"
#func_run_test "make check"
#cd ..
#rm -rf libgtextutils-0.7*


# ucscTools - tools for processing 2bit files from UCSC (twoBitInfo and twoBitToFa)
# needed to build indexes and fasta files, taken from http://hgdownload.cse.ucsc.edu/admin/exe/linux.x86_64/
func_get_package 'ucscTools-20140819'
mv ucscTools-20140819/* ${DIR_TARGET}/bin/
rm -rf ucscTools-20140819*


# wget - needed to download genomes from UCSC
func_get_package 'wget-1.15'
cd wget-1.15
func_run "./configure --prefix=${DIR_TARGET} --with-ssl=openssl --disable-debug"
func_run "make all -j ${CORES_NUMBER}"
func_run "make install"
func_run_test "make check"
cd ..
rm -rf wget-1.15*
