# NOTE: if a parameter doesn't apply to you, use '' for that parameter.
# NOTE: 1 means "true" or "on" and 0 means "false" or "off"

#############################################################################################
# INPUT INFO
#############################################################################################
# Where are the chr fasta files to use as sources?
# NOTE: for speed reasons, it is assumed you have linearized each chromosome file.
#       First line == defline ; second line == sequence. Nothing else will work.
input.src.chrDir                        = /users/hgsc/rharris1/brl/blastdb/Hs.GoldenPath/hg16/linear
input.src.chrFilePrefix                 = chr
input.src.chrFileSuffix                 = .linear.fa
input.src.chrIDList                     = 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,X,Y
input.src.chrIDPrefix                   = chr
input.src.chrIDSuffix                   = ''
# We need a file of chromosome lengths. Of the form:
#     <chrID>	<length>
input.info.chrLengthsFile		= /users/hgsc/rharris1/brl/blastdb/Hs.GoldenPath/hg16/chrLengths.tab.txt
# If you want to make an array to simulate pooled BACs, we need a bac2pools map file.
# Generally of the form:
# <bacID>	<pool1ID>	<pool2ID>	<pool3ID>	<pool4ID>
# Where pool1 and pool2 are from the first array, and pool3 and pool 4 are from a second.
# If not pooling or doing just WGS, put ''.
input.pooling.bac2poolMapFile           = /users/hgsc/rharris1/brl/poolData/Rhesus.macaque/hg15-29-5-2003/mapsIndicesEtc/bac2pools.map.txt
# If not provided, the pid-unbiased-time  will be used to init the Random Number Generator
# Use this for reproducibly random bac and/or read generation.
input.randomSeed			= 538921

#############################################################################################
# PARAMETERS AFFECTING THE GENERAL APPROACH TO FAKE SEQUENCE GENERATION
#############################################################################################
# Generate WGS type reads. (No Bacs)
param.approach.makeWGSReads                  = 1
# Number of *WGS* reads to make. Put 0 if doing BACs.
param.approach.numWGSReadsToMake             = 100000
# Should reads be assigned to pools (if so, requires "approach.makeWGSReads" == 0)
param.approach.doPoolAssignment              = 0
# Should the P(chrZ) is chosen as source be weighted by its length?
param.weightChrSelectionByLength             = 1
# Should we output the mutation masks on stderr for inspection?
param.doOutputMutationMasks                  = 1

#############################################################################################
# POOLING PARAMETERS
#############################################################################################
# How many arrays in your pool design?
# Eg: 2 means you have the original array and a shuffled version of it.
param.pooling.numArrays                      = 0
# How many pools per bac? Typically, this is 2 per array (rows and cols)
param.pooling.numPoolsPerBAC                 = 0
# <not implemented yet...biased pools only by chance>
param.pooling.doNonUniformPoolAssignment     = 0
# If you are using non-uniform pool modelling, you need to have a bias file.
#    The bias file has 1 line per bac 'rank'. 48 bacs per pool == 48 lines
#    The first line is the percentage of reads in the pool for the most-represented bac.
#    The second line is the percentage of reads in the pool for the next most-represented bac.
#    Thus, the sum of the numbers in the file should be 100.0 (lying only hurts you)
#    The % signs are optional. The number part will be converted to a float as best as possible.
param.pooling.poolBiasByRankFile             = /users/hgsc/andrewj/work/brl/src/ruby/brl/PGI/poolBiasFile.sample
#############################################################################################
# FAKE BAC GENERATION PARAMETERS
#############################################################################################
# Real sequence (the source) contains Ns. What % of Ns is tolerated in the
# src regions for fake bacs? Eg, 10 means 10% can be Ns.
param.bacs.maxPercentNsInSelectedSrc         = 0
# How many bacs to make? If simulating a pooled design, don't lie.
param.bacs.numBACsToGenerate                 = 2304
# Do you want to mutate the BAC sequence?
param.bacs.doMutateBacs                      = 0
# What is % P(mutate) for each BAC?
# Mutations include: translations and single-base indels
# Higher this is, slower the program will run!!
param.bacs.bacMutationProbability            = 0
# What is the P(indel) for any given BAC mutation?
# Global indel rate will be P(mutate) * P(indel)
# Indels are single base only (currently)
param.bacs.bacProbabilityMutationIsInDel     = 0
# What is the length of each BAC? There will be no variation
param.bacs.fakeBACLength                     = 163000
# The number of reads per BAC can be randomly chosen.
# If you supply a range, every value in the range is equally likely.
# If you want a fixed number per BAC, make the min == max.
# NOTE: if you are using pools with *non-uniformity*, then read this carefully:
#    The number here should be the number of reads in the TOP RANK.
#    The top rank bac in each pool will always have this number of reads.
#    The other rank bacs will have a proportion of this, as determined by your bias model.
#    However, this is done randomly, so there will be some variation (on purpose)
#    Thus, choose a number here such that, given your bias model, the *AVERAGE* reads per bac comes out to what you want.
#    If we want an average of Y reads per bac per pool, we do this in Excel by the following:
#        Set the TOP RANK to have X reads (X>Y)
#        Calculate how many reads the other ranks have, using their proportions in your bias model.
#        Calculate the average. 
#        Adjust X until the average is ~Y.
#        Multiply the final X by the number of pools the bac is in (here, it's 4)
#    In this example, the number 24 for the TOP RANK yields an average of 8.06 reads / bac / pool, given our bias model file.
#    So we put 4x24 == 96 here.
param.bacs.minReadsPerFakeBAC                = 96
param.bacs.maxReadsPerFakeBAC                = 96
# Is BAC overlap ok or not ok?
param.bacs.allowBACOverlap                   = 1

#############################################################################################
# FAKE READ GENERATION PARAMETERS
#############################################################################################
# Real sequence (the source) contains Ns. What % of Ns is tolerated in the
# src regions for fake reads? Eg, 10 means 10% can be Ns.
param.reads.maxPercentNsInSelectedSrc        = 10
# Do you want to mutate the BAC sequence?
param.reads.doMutateReads                    = 1
# What is % P(mutate) for each read base?
# Mutations include: translations and single-base indels
# Higher this is, slower the program will run!!
# NOTE: if you are mutating your BACs as well, this will be *addition* mutation.
# It can be used to simulate sequencing errors and such in that case.
param.reads.readMutationProbability          = 30
# What is the P(indel) for any given read mutation?
# Global indel rate will be P(mutate) * P(indel)
# Indels are single base only (currently)
param.reads.readProbabilityMutationIsInDel   = 25
# What is the length of each Read? There will be no variation
param.reads.fakeReadLength                   = 750
# Is read overlap ok? Be careful if you select large WGS or BAC skim read coverage.
param.reads.allowReadOverlap                 = 1
# Are we supposed to make mate pairs?
param.reads.doMatePairs                      = 1
# Insert sizes are well modelled by a normal distribution with a mean and stdev.
# To get a better model, we ask for a insert size cutoff (like from a sizing gel)
param.reads.insertMean                       = 2250
param.reads.insertStdev                      = 550
param.reads.minInsertCutoff                  = 700
############################################################################################
# OUTPUT FILE INFO
############################################################################################
# What is the top level dir where we will do the simulation?
# The .info files will be placed here, as will any subdirs.
output.outDir                                = .
# In what subdir should all your BACs be placed? There will be one sub-subdir per BAC.
# If doing WGS, put ''.
output.bacSubDir                             = ''
# In what subdir should your reads be placed?
# For pooling, pool sub-subdirs will be placed in here.
# For wgs, the reads file will be here. Could be big.
# For bacs w/o pooling, this is ignored. Reads file will be placed with the bac file. (put '')
output.readSubDir                            = wgs2
# What is the prefix for your bac fasta files? The .fakeBacs.fa extension will be added.
output.bacs.fakeBACFileBase                  = ''
# What is the prefix for your read fasta files? The .fakeReads.fa will be added.
output.fakeReadFileBase                      = wgs
