#!/bin/env ruby
require 'thread'
require 'json'
require 'yaml'
require 'bson'
require 'brl/util/util'

module BSON
  class ObjectId
    # @todo MAKE SURE GENBOREE KB IS USING THIS extensively for best ROBUSTNES
    #
    # Interpret object as some alternative form of a {BSON::ObjectId} and turn it
    #   [back] into a {BSON::ObjectId} instance. Useful for dealing with deserialized
    #   and the reserialized MongoDB documents and the @"_id"@ field.
    # Currently can interpret:
    # * @BSON::ObjectId@
    # * @String@
    # * @BSON::DBRef@
    # * @Hash["$oid"]@
    # * @Hash["_id"]@
    # * @BSON::OrderedHash["_id"]@
    # @note {BSON::ObjectId} input will be returned as-is.
    # @note {String} input will assume to be a valid ObjectId string, as produced by
    #   {BSON::ObjectId#to_s} and various serializing methods.
    # @note {BSON::DBRef} input will return just the ObjectId portion within the reference object.
    # @note {Hash} input which has the special @"$oid"@ field, as produced by
    #   {BSON::ObjectId#as_json} and {#to_h} will convert the {String} value at
    #   @"$oid"@ to a {BSON::ObjectId}.
    # @note {Hash} or {BSON::OrderedHash} input with the @"_id"@ field, as produced by
    #   many MongoDB driver functions (and any conversion to a regular {Hash}) will grab
    #   the value at @"_id"@ and try to interpret it as a {BSON::ObjectId}.
    # @param [Object] object The object that supposedly is a {BSON::ObjectId} in
    #   some other form. Turn it into an actual {BSON::ObjectId}.
    # @return [BSON::ObjectId, nil] @object@ interpretted as a {BSON::ObjectId} or @nil@
    #   if don't know how to interpret @object@.
    def self.interpret(object)
      # If input is something with the "_id" key, get the value there and then interpret that.
      if((object.is_a?(Hash) or object.is_a?(BSON::OrderedHash)) and (object.key?("_id") or object.key?(:_id)))
        object = (object["_id"] or object[:_id])
      end
      # Interpret
      if(object.is_a?(BSON::ObjectId))
        retVal = object
      elsif(object.is_a?(BSON::DBRef))
        retVal = object.object_id
      elsif(object.is_a?(Hash) and object.key?("$oid"))
        retVal = BSON::ObjectId.from_string(object["$oid"])
      elsif(object.is_a?(String))
        retVal = BSON::ObjectId.from_string(object)
      else
        retVal = nil
      end
      return retVal
    end

    # Convert this object to a {Hash}. Basically just calls the spectacularly
    #   mis-named {BSON::ObjectId#as_json}. Compare to {BSON::ObjectId#to_json}.
    # @param (see BSON::ObjectId#as_json)
    def to_h()
      return self.as_json()
    end

    # Make instance using a {Hash} containing the @"$oid"@ key, as generated by
    #   {BSON::ObjectId#as_json} or when converting {BSON::OrderedHash} MongoDB
    #   documents to JSON (and then deserializeing) or to regular Ruby {Hash} objects.
    # @param [Hash] oidHash The {Hash} with the special @"$oid"@ key.
    def self.from_oidHash(oidHash)
      return self.from_string(oidHash["$oid"])
    end
  end
end
