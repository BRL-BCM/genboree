#!/usr/bin/env ruby

require "brl/genboree/rest/data/builders/builder"
require "brl/genboree/rest/data/builders/dbAnnosBuilder"
require "brl/genboree/rest/resources/trackAnnos"

#--
module BRL ; module Genboree ; module REST ; module Data
module Builders
#++

  # TrackAnnosBuilder
  #  This +Builder+ subclass performs almost the same as the +DbAnnosBuilder+
  #  but with the additional constraint that all annotations must be coming
  #  from one track.  This is implemented by overriding the +buildSql()+
  #  method and modifying the value of the +constraints+ parameter as needed.
  class TrackAnnosBuilder < DbAnnosBuilder
    include BRL::Genboree::REST::Helpers

    # This constructor allows the user to create a Builder object that constrains
    # the Boolean Query results to a single track.  This constraint is in addition
    # to those defined by the Boolean Query itself.
    # [+trackName+] The +String+ representing the name of track (not URL escaped)
    #   any single quotes will be properly backslashed.
    def initialize(url)
      matches = self.class::pattern().match(url)
      @fmethod = @fsource = nil
      if(matches[3])
        @fmethod, @fsource = Rack::Utils.unescape(matches[3]).split(":")
        @fmethod = @fmethod.gsub(/'/, "\\\\'") unless(@fmethod.nil?)
        @fsource = @fsource.gsub(/'/, "\\\\'") unless(@fsource.nil?)
      end
    end

    # This +Builder+ subclass has to provide additional constraints to the query
    # generated by +dbAnnosBuilder+ (force a match to track name), but other
    # than that, it performs the same tasks (and same chunked mode output).
    # We add that constraint (fmethod="foo" AND fsource="bar") by overriding
    # this method here.
    def buildSql(query, constraints = nil)
      # Define a special constraint for this query
      if(@fmethod.nil? and @fsource.nil?)
        constraints = ""
      elsif(@fsource.nil?)
        constraints = "ftype.fmethod='#{@fmethod}'"
      elsif(@fmethod.nil?)
        constraints = "ftype.fsource='#{@fsource}'"
      else
        constraints = "ftype.fmethod='#{@fmethod}' AND ftype.fsource='#{@fsource}'"
      end

      super(query, constraints)
    end

    def self.pattern()
      return BRL::REST::Resources::TrackAnnos.pattern()
    end
  end # class TrackAnnosBuilder
end # module Builders
end ; end ; end ; end # module BRL ; Genboree ; REST ; Data
