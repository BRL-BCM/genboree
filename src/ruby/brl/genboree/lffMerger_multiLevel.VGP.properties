
# ##############################################################################
# Program-Location-Related Properties
# ##############################################################################
# Where is the size-checker script?
program.sizeChecker           = ~/work/brl/src/ruby/brl/genboree/lffSizeChecker.rb
# Where is the actual merger script?
program.merger                = ~/work/brl/src/ruby/brl/genboree/lffMerger_multiLevel.VGP.rb
# Where is the non-merger merger script that just adds the _CV, _GV suffixes?
program.noMerger              = /usr/local/brl/local/apache/ruby/brl/genboree/lffMerger_multiLevel.noMerge.VGP.rb
# Where is ruby? (Fill this in for web servers...'' is good for hgsc systems)
program.ruby                  = ''

# ##############################################################################
# Output-Related Properties
# ##############################################################################
# The string ".merged.lff" will be tacked on to the output file. You can append
# another string as well if you like...or put '' for no additional suffix.
output.outputSuffix           = ''
# In what directory to write all the output files?
output.outputDir              = .
# This string will be appended to the class of any merged records. Put '' for none.
output.mergeClassSuffix        = _Merged
# This string will be appended to the type of any merged records. Put '' for none.
output.mergeTypeSuffix         = ''
# Should we simply group existing annotations or create a new annotation?
output.groupExistingAnnotations = 0,0,0
# Should the aggregate's orientation ('strand') reflect the derived (or forced)
# orientation (0) *or* reflect the ordering direction (1).
# The latter is more useful for viewing rearrangement.
output.orientationWillReflectOrdering = 1,0,0
# What are the suffices to add to the names for each level of merging?
# Put the keyword '<none>' if no suffix.
output.nameSuffices             = <none>,_CV,_GV
# Put the base url string for any file to be made for download ('' if not doing
# web-server stuff)
output.baseUrl                  = ''

# ##############################################################################
# Input-Related Properties
# ##############################################################################
# List the types for which merging should occur (CSV). Put "<all>" to attempt merging for all record types
input.typesToMerge            = <all>
# List the subtypes for which merging should occur (CSV). Put "<all>" to attempt merging for all record subtypes
input.subtypesToMerge         = <all>
# A regular expression that will isolate the 'query' name (from the LFF name field)
# i.e. not including any 'version' strings and such.
# Explanation of Non-Greedy *? operator: suck up as much as you can with the .*?, but
# allow the next expression a chance to match. This allows the terminal .<ver> to be
# present or not, while allowing names without versions as well.
input.query.IDRegExp          = ^(.*?)(?:\.\d+)?$

# ##############################################################################
# Properties Influencing Aggregate Formation
# ##############################################################################
# How many levels of merging to do?
param.numIterations                   = 3
# Should we force the queryID's (as well as the target IDs) to match before
# merging (put 0 if trying to merge reads into clusters, etc;
# 1 for chromosomes and such)
param.doRequireSameQueryIDs           = 1,1,1
# Should merging be based on start/end in both refSeq AND 'query' ?
param.reciprocalMerge                 = 1,1,1
# What is merge radius (radius means radius)
param.genome1.mergeRadius             = 50000,250000,400000
param.genome2.mergeRadius             = 50000,250000,400000
# Should we merge + records with - records or keep them separate
param.strictOrientation               = 0,0,0
# Should we force order of annotations to be maintained within aggregates,
# or are rearrangements within aggregates ok?
param.strictOrdering                  = 1,0,0

# ##############################################################################
# Properties Influencing Aggregate Acceptance
# ##############################################################################
# Should we filter the merged records based on their spans?
# If so, what are size cut-offs? Put 0 or '' or something if not filtering.
param.doSpanSizeFiltering             = 1,1,1
param.genome1.minSpanSize             = 25000,1000000,1000000
param.genome2.minSpanSize             = 25000,1000000,1000000
# Should we filter the merged records based on their sum-of-scores?
# If so, what is the minium sum-of-scores? Put 0 or '' or something if not filtering.
param.doMergedScoreFiltering          = 1,1,1
param.minMergedScore                  = 750,500,500
# Should we filter for a minimum density of evidence?
# If so, what is the minium score/spanLengths?
param.doDensityFiltering              = 1,0,0
param.genome1.minScorePerSpan1        = 0.001,0.05,0.05
param.genome2.minScorePerSpan2        = 0.001,0.05,0.05
# Should we filter the merged records based on the number of members?
# If so, what is the minimum number of merged members in a merged record?
# Put 0 or '' or something if not filtering.
param.doNumMergedMembersFiltering     = 1,0,0
param.minNumMergedRecords             = 3,2,2
# Should we perform Span Ratio Filtering? i.e.:
#   - if 'span' refers the the endPosition - startPosition on a particular genome
#   - if we are doing reciprocal merging (see above) so we have span1 for genome1 and span2 for genome2
#   - then the Span Ratio is span1/span2 or span2/span1, whichever is smaller
# If so, what is the minimum Span Ratio? Put 0 or '' or something if not filtering.
param.doSpanRatioFiltering            = 1,1,1
param.minSpanRatio                    = 0.3,0.5,0.5
