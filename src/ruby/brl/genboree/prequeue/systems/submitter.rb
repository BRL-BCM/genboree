#!/usr/bin/env ruby
$VERBOSE = nil

# ##############################################################################
# REQUIRED CLASSES/MODULES
# ##############################################################################
require 'json'
require 'brl/util/util'
require 'brl/genboree/genboreeUtil'

module BRL ; module Genboree ; module Prequeue ; module Systems
  class ExecutionPermissionError < StandardError ; end

  class Submitter
    # Abstract parent class of batch system-specific submitter subclasses.
    # Defines interface methods and inheritablegeneric methods [if any]
    #------------------------------------------------------------------
    # CLASS INSTANCE VARIABLES
    #------------------------------------------------------------------
    class << self
      # Set up class instance variables ; these are typically also set in the
      # sub-classes to specific values (or to use these defaults if appropriate)
      attr_accessor :genbConf, :rsyncCommand, :jobsDirectory, :workingDirectoryBase
      Submitter.genbConf = BRL::Genboree::GenboreeConfig.load()
      # @deprecated These class instance variables are deprecated.
      Submitter.rsyncCommand = nil
      Submitter.jobsDirectory = nil
      Submitter.workingDirectoryBase = nil
    end

    #------------------------------------------------------------------
    # CONSTANTS
    #------------------------------------------------------------------
    SYSTEM_TYPE = '[NOT SET]'
    DEFAULT_CONF = {
      'rsyncCommand'         => nil,
      'jobsDirectory'        => nil,
      'workingDirectoryBase' => nil
    }

    #------------------------------------------------------------------
    # ACCESSORS
    #------------------------------------------------------------------
    attr_accessor :confFile, :conf
    attr_accessor :rsyncCommand, :jobsDirectory, :workingDirectoryBase

    #------------------------------------------------------------------
    # INSTANCE METHODS
    #------------------------------------------------------------------
    # Initializer. Sub-classes should make sure to call super(job) in their
    # implementations of initialize(job) [if any] in case some generic operations
    # are added.
    # [+job+] An instance of BRL::Genboree::Prequeue::Job, filled in appropriate for
    #         submission to an actual batch system. Should have be prequeued via the
    #         Job#prequeue() method at some point previously.
    def initialize(job, confFile=nil)
      # Load and inspect key items of conf file [if present]
      @confFile = confFile
      if(@confFile.nil?)
        @conf = self.class::DEFAULT_CONF.deep_clone
      else
        raise ArgumentError, "ERROR: The conf file #{@confFile.inspect} provided is not readable." unless(File.readable?(@confFile))
        conf = JSON.parse(File.read(@confFile))
        @conf = self.class::DEFAULT_CONF.merge(conf)
      end
    end

    # Submit the job to the appropriate batch system. Implementation highly batch-system
    # specific.
    # [+job+] An instance of BRL::Genboree::Prequeue::Job, filled in appropriate for
    #         submission to an actual batch system. Should have be prequeued via the
    #         Job#prequeue() method at some point previously.
    # [+updateSystemJobId+] [optional; default=true] Boolean indicating whether the
    #                       submitter should record the specific job id the batch system
    #                       assigns upon job submission. This will be stored in the prequeue
    #                       database.
    # [+updateStatus+]      [optional; default=true] Boolean indicating whether the
    #                       submitter should update the status of the job record in the
    #                       prequeue database.
    # [+returns+]           Must return the system specific job id generated by the
    #                       batch system.
    def submit(job, updateSystemJobId=true, updateStatus=true)
      raise "Interface Method '#{__method__}()' Not Implemented!"
    end

    # Get an appropriate scratch dir (working dir) for the job to use when it
    # is running. Highly batch system-specific.
    def getScratchDir(job)
      raise "Interface Method '#{__method__}()' Not Implemented!"
    end

    # Extract needed info from directive Hash. Much will be batch system-specific
    # and this may be how alternative queues get enough info in them to submit properly.
    # The default implementation extracts nothings (i.e. directives don't matter)
    def extractDirectiveInfo(job)
      return nil
    end

    #------------------------------------------------------------------
    # HELPER METHODS (mainly for internal use)
    #------------------------------------------------------------------
  end # class Submitter
end ; end ; end ; end # module BRL ; module Genboree ; module Prequeue ; module Systems
