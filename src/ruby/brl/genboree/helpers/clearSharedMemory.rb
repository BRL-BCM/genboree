#!/usr/bin/env ruby

# A script to clear shared memory after a tool wrapper finishes (just exogenousSTARMapping for now)
require 'brl/util/processUtil'

# If no argument is supplied, then provide usage info
if(ARGV.size == 0)
  $stderr.puts("Usage: clearSharedMemory.rb someListOfSharedMemoryIds.txt")
end
# File name containing shared memory IDs of interest is captured in first (only) argument
fileName = ARGV[0]
# Read in list of shared memory IDs of interest (generated by tool or some other source)
allShmids = File.read(fileName)
# Remove each shared memory ID one at a time
allShmids.each_line { |currentShmid|
  currentShmid.chomp!()
  unless(BRL::Util::ProcessUtil.shmidExist?(currentShmid).empty?)
    BRL::Util::ProcessUtil.removeShmByShmid(currentShmid)
  end
}
# Sleep for a second to make sure that all shmids are removed from memory
sleep(1)
# Let's check to make sure that all shmids have been removed from memory
failedJob = false
allShmids.each_line { |currentShmid|
  currentShmid.chomp!()
  unless(BRL::Util::ProcessUtil.shmidExist?(currentShmid).empty?)
    $stderr.puts("The shmid #{currentShmid} is still in shared memory when it shouldn't be! Output: #{BRL::Util::ProcessUtil.shmidExist?(currentShmid)}")
    failedJob = true
  end
}
# If any shmids were still in shared memory, then we exit with a status of 21. Otherwise, if we were successful in clearing our shared memory, we exit with a status of 0.
if(failedJob)
  exit(21)
else
  $stderr.puts("All shmids successfully cleared from memory.")
  exit(0)
end
