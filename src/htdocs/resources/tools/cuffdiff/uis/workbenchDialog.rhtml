<%# RENDER HTML%>
<%
  require 'brl/genboree/rest/apiCaller'
  require 'brl/genboree/rest/helpers/databaseApiUriHelper'
  require 'brl/genboree/rest/helpers/fileApiUriHelper'
  require 'brl/genboree/rest/helpers/fileEntityListApiUriHelper'
  require "brl/db/dbrc"
  require 'uri'
  require 'json'
  width = (@hasAccess ? 500 : 320)
  height = (@hasAccess ? 425 : 320)
%>
<form id="wbDialogForm" name="wbDialogForm" action="wbDefault" style="width: <%=width%>px; height: <%=height%>px;" onsubmit="return submitToolJob(this);" method="POST" class="wbDialog wbForm" >

  <%# Tool Title %>
  <%= renderStaticFrag(@toolIdStr, :wbToolTitle) %>
  <%# Overview text %>
<%
  if(@hasAccess)
%>
  <%= renderStaticFrag(@toolIdStr, :wbToolOverview,
      { :toolOverview =>
        "
            <p>Cuffdiff tracks changes in the relative abundance of transcripts sharing a common transcriptional start site, and in the relative abundances of the primary transcripts of each gene. Tracking the former allows one to see changes in splicing, and tracking the latter lets one observe changes in relative promoter use for that gene. It produces a number of output files that contain results for changes in expression at the level of transcripts, primary transcripts, and genes.</p>


            <p>To set up the Cuffdiff analysis:</p>


            <p><ins>Part 1:  Create entity lists as input for Cuffdiff</ins></p>


          Populate <strong>Input Data</strong>
            <ul>
            <li>Drag two or more SAM/BAM files containing fragment alignments (<em>accepted_hits.bam</em>) for two or more samples into <strong>Input Data</strong></li>
            </ul>


          Populate <strong>Output Targets</strong>
            <ul>
            <li>Drag a database into <strong>Output Targets</strong> (the entity lists will be deposited into this database under:  <code>Lists &#38; Selection</code>  &raquo; <code>List of Files</code> )</li>
            </ul>


            <ul>
            <li>Create entity lists using:  <code>Data</code> &raquo; <code>Entity Lists</code> &raquo; <code>File Entity List</code> &raquo; <code>Create File Entity List</code><br />   <em>Please note:</em> You must generate a file entity list for each experimental input, even for those with a single replicate.  You will be solicited for a sample name for each of the input SAM/BAM files, and will need to give each input entity list a unique name.</li>
            </ul>


            <p><ins>Part 2: Submit entity lists for Cuffdiff analysis</ins></p>


          Populate <strong>Input Data</strong>
            <ul>
            <li>Drag the entity lists into <strong>Input Data</strong></li>
            </ul>


          Populate <strong>Output Targets</strong>
            <ul>
            <li>Drag a database into <strong>Output Targets</strong></li>
            </ul>


          Configure &#38; Submit the Cuffdiff Job
            <ul>
            <li>Select <code>Transcriptome</code> &raquo; <code>Analyze RNA-Seq Data</code> &raquo; <code>Detect Transcription Changes by Cuffdiff</code></li>
              <li>Click <code>Submit</code></li>
            </ul>


            <p>Cuffdiff generates <em>four sets</em> of tracking files:  1) FPKM, 2) differential expression, 3) count, and 3) read group.<br />Genboree generates four <em>xls</em> files that will be of primary interest (<strong>bold</strong> below).</p>


          <strong>FPKM tracking files</strong> (calculates FPKM of each transcript, primary transcript, and gene in each sample):
            <ul>
            <li><strong><em>isoforms.fpkm_tracking.withGeneName.xls</em></strong> (transcript FPKMs)</li>
              <li><strong><em>genes.fpkm_tracking.withGeneName.xls</em></strong> (summed FPKM of transcripts sharing each gene_id)</li>
              <li><em>cds.fpkm_tracking</em> (summed FPKM of transcripts sharing each p_id, independent of tss_id)</li>
              <li><em>tss_groups.fpkm_tracking</em> (primary transcript FPKMs)</li>
            </ul>


          <strong>Differential expression tests</strong> (lists results of differential expression testing between samples for spliced transcripts, primary transcripts, genes, and coding sequences.  For each pair of samples <em>x</em> and <em>y</em>, four files are created):
            <ul>
            <li><strong><em>isoform_exp.diff.withGeneName.xls</em></strong> (transcript differential FPKM)</li>
              <li><strong><em>gene_exp.diff.withGeneName.xls</em></strong> (tests differences in summed FPKM of transcripts sharing each gene_id)</li>
              <li><em>tss_group_exp.diff</em> (tests differences in summed FPKM of transcripts sharing each tss_id)</li>
              <li><em>cds_exp.diff</em> (tests differences in summed FPKM of transcripts sharing each p_id independent of tss_id)</li>
            </ul>


            <p>Cuffdiff also generates these output files:</p>


          <strong>Count tracking files</strong> (estimates number of fragments originating from each transcript, primary transcript, and gene in each sample):
            <ul>
            <li><em>isoforms.count_tracking</em> (transcript counts)</li>
              <li><em>genes.count_tracking</em> (gene counts, summed counts of transcripts sharing each gene_id)</li>
              <li><em>cds.count_tracking</em> (coding sequence counts)</li>
              <li><em>tss_groups.count_tracking</em> (primary transcript counts)</li>
            </ul>


          <strong>Read group tracking files</strong> (expression and fragment count for each transcript, primary transcript, and gene in each replicate):
            <ul>
            <li><em>isoforms.read_group_tracking</em> (transcript read groups)</li>
              <li><em>genes.read_group_tracking</em> (summed expression and counts of transcript sharing each gene_id in each replicate)</li>
              <li><em>cds.read_group_tracking</em> (summed expression and counts of transcripts sharing each p_id, independent of tss_id in each replicate)</li>
              <li><em>tss_groups.read_group_tracking</em> (summed expression and counts of transcripts sharing each tss_id in each replicate)</li>
            </ul>


          <strong>Genboree Job Specification File</strong>:
            <ul>
            <li>jobFile.json</li>
            </ul>

        "
      })
  %>

  <%# Input data summary %>
  <%=
      fileApiHelper = BRL::Genboree::REST::Helpers::FileApiUriHelper.new()
      fileEntityListApiHelper = BRL::Genboree::REST::Helpers::FileEntityListApiUriHelper.new()
      if(fileEntityListApiHelper.extractName(@inputs[0]))
        renderFrag(@toolIdStr, :wbDialogSection,
        {
          :sectionTitle => "Input Files:",
          :sectionHtml =>
            renderFrag(@toolIdStr, :wbFileEntityListSummary, { :fileEntityList => @inputs, :label => "File Entity Lists" } )
        })
      else
        renderFrag(@toolIdStr, :wbDialogSection,
        {
          :sectionTitle => "Input Files:",
          :sectionHtml =>
            renderFrag(@toolIdStr, :wbFileListSummary, { :filesList => @inputs, :label => "Files Of Interest" } )
        })
      end
  %>

  <%# Output database summary %>
  <%=
      renderFrag(@toolIdStr, :wbDialogSection,
      {
        :sectionTitle => "Output Database:",
        :sectionHtml => renderFrag(@toolIdStr, :wbDatabaseListSummary, { :databaseList => @outputs } )
      })
  %>

  <%# Tool-specific UI widgets user provides/reviews %>
  <%=

      sampleList = @settings['sampleList']
      widgets = [
                  { :id => 'analysisName', :label => 'Analysis Name', :type => :text , :size => "25", :value => "Cuffdiff-#{Time.now.strftime('%Y-%m-%d-%H:%M:%S').gsub('-0', '-')}", :title => "The top-level output folder used to organize Cuffdiff results"},
                  { :id => 'timeSeries', :label => 'Time Series', :type => :checkbox, :title => "Treat samples as a time-series [ Default:  FALSE ]"},
                  { :id => 'minAlignmentCount', :label => 'Min Align Count', :type => :text, :size => "6", :value => "10", :title => "Minimum number of alignments in a locus for testing [Default: 10]"},
                  { :id => 'mutliReadCorrect', :label => 'Multi Read Correct', :type => :checkbox, :title => "Use 'rescue method' for multi-reads (more accurate [Default:  FALSE ]"},
                  { :id => 'upperQuartNorm', :label => 'Upper Quart Norm', :type => :checkbox, :title => "Use upper-quartile normalization [Default: FALSE ]"}
                ]
      advWidgets = [
                      { :id => 'advancedSettings', :type => :advancedSection,
                        :width => '450px',
                        :text => '(The default values for these settings are what will be used if you do not change them.)',
                        :widgets =>
                        [
                          { :id => 'fragLenMean', :label => 'Mean Frag Length', :labelStyle => 'width:250px;', :type => :text, :size => "6", :value => "200", :style => 'font-size: 80%', :title => 'Average fragment length (unpaired reads only) [Default: 200 ]'},
                          { :id => 'fragLenStdev', :label => 'Frag Length Stdev', :labelStyle => 'width:250px;', :type => :text, :size => "6", :value => "80", :style => 'font-size: 80%', :title => ' Fragment length std deviation (unpaired reads only)  [Default: 80 ]'},
                          { :id => 'numImportSamples', :label => 'Num Importance Samples', :labelStyle => 'width:250px;', :type => :text, :size => "6", :value => "1000", :style => 'font-size: 80%', :title => 'Number of importance samples for MAP restimation [Default: 1000]'},
                          { :id => 'numBootstrapSamples', :label => 'Num Bootstrap Samples', :labelStyle => 'width:250px;', :type => :text, :size => "6", :value => "20", :style => 'font-size: 80%', :title => 'Number of bootstrap replications [Default: 20 ]'},
                          { :id => 'bootstrapFrac', :label => 'Bootstrap Fraction', :labelStyle => 'width:250px;', :type => :text, :size => "6", :value => "1.0", :style => 'font-size: 80%', :title => 'Fraction of fragments in each bootstrap sample [Default: 1.0 ]'},
                          { :id => 'maxMleIter', :label => 'Max MLE Iterations', :labelStyle => 'width:250px;', :type => :text, :size => "6", :value => "5000", :style => 'font-size: 80%', :title => 'Maximum iterations allowed for MLE calculation. [Default: 5000]'},
                          { :name => 'hitsNorm', :label => 'Compatible Hits Norm', :labelStyle => 'width:250px;', :type => :radio, :value => "compHitsHorm", :checked => true, :size => "6", :style => 'font-size: 80%', :title => 'Count hits compatible with reference RNAs only [Default: TRUE]'},
                          { :name => 'hitsNorm', :label => 'Total Hits Norm', :labelStyle => 'width:250px;', :type => :radio, :value => "totalHitsNorm", :size => "6", :style => 'font-size: 80%', :title => 'Count all hits for normalization [Default: FALSE]'},
                          { :id => 'poissonDisp', :label => 'Poisson Dispersion', :labelStyle => 'width:250px;', :type => :checkbox, :size => "6", :style => 'font-size: 80%', :title => "Don't fit fragment counts for overdispersion [Default: FALSE]"},
                          { :id => 'maxBundleFrags', :label => 'Max Bundle Frags', :labelStyle => 'width:250px;', :type => :text, :size => "6", :value => "500000", :style => 'font-size: 80%', :title => "Maximum fragments allowed in a given bundle [ default: 500000]"}
                        ]
                      }
                    ]
      sampleWidgets = []
      count = 0
      sampleList.each_key { |key|
        count += 1
        fileListOrEntity = sampleList[key]
        fileName = ""
        if(fileApiHelper.extractName(fileListOrEntity[0]))
          fileName = fileApiHelper.extractName(fileListOrEntity[0])
        else
          fileName = fileListOrEntity[0]
        end
        sampleWidgets << { :id => "#{key}_path", :label => "Sample Name For:",  :type => :wbSimpleWidgetHeader, :size => "25", :value => "#{fileName}", :noUnderline => true}
        sampleWidgets << { :id => "#{key}", :label => "",  :type => :text, :size => "25", :value => "Sample_#{count}", :title => 'Sample Name for the file.'}
      }
      allWidgets = widgets + sampleWidgets + advWidgets
      renderFrag(@toolIdStr, :wbToolSettingsUI,
      {
        :sectionTitle => "Settings",
        :widgets => allWidgets
      })

  %>
  <%= renderStaticFrag(@toolIdStr, :wbToolButtons,
      {
        :buttons => [ { :type => :submit }, { :type => :cancel} ]
      })
  %>
</form>
<%
  else
%>
<%= renderFrag(@toolIdStr, :wbToolHelpOverview,
      { :toolHelpOverview =>
        "
          <img src='/images/workbench/underConstruction_wikipedia_free_74x64.png' style='float:left; padding: 0px 4px 10px 4px; width:74px; height:64px;'>
          <div style='float: left; width: 288px; margin-top: 10px ; color: red;'>This tool is currently in review. Thus, the tool is currently only available to the authors, testers, and reviewers.</div>
          <span style='color: red;'>Prototype will be made available for evaluation as soon as possible.</span>
        "
      })
  %>
  <%# Cancel Button %>
  <%= renderFrag(@toolIdStr, :wbToolButtons,
      {
        :buttons => [ { :type => :cancel} ]
      })
  %>
</form>
<%
  end
%>
