<%# RENDER HTML %>
<%
    width = (@hasAccess ? 500 : 320)
    height = (@hasAccess ? 425 : 320)
    formTag = ""
    if(@inputs.size == 0)
      formTag = "<form id=\"wbDialogForm\" name=\"wbDialogForm\" action=\"wbDefault\" style=\"width: #{width}px; height: #{height}px;\" onsubmit=\"return UploadDbFile.submitJob(this) ; \" method=\"POST\" class=\"wbDialog wbForm\" enctype=\"multipart/form-data\">"
    else
      formTag = "<form id=\"wbDialogForm\" name=\"wbDialogForm\" action=\"wbDefault\" style=\"width: #{width}px; height: #{height}px;\" onsubmit=\"return submitToolJob(this);\" method=\"POST\" class=\"wbDialog wbForm\" >"
    end
%>

  <%= formTag %>


  <%# Tool Title %>
  <%= renderStaticFrag(@toolIdStr, :wbToolTitle) %>
<%
  if(@hasAccess)
%>
  <%# Overview text %>
  <%= renderStaticFrag(@toolIdStr, :wbToolOverview,
      { :toolOverview =>
        "
          This tool will import microbiome analysis results data obtained for one or more Samples into your output <u>Database</u>.  To store such analysis results for the Sample, we'll need to know:
          <ul>
            <li>To what kind of annotation does the data pertain? Genes, pathways, taxa, etc?</li>
            <li>What type of measurement is it? Simple presence/absence, relative abundance, etc?</li>
          </ul>
          <br>&nbsp;<br>
          For each Gene, Pathway, Taxon, etc, the Samples will have a score.
          <br>&nbsp;<br>
          In order for the file to be imported successfully, the file needs to be in a specific, but simple, <i>tab-delimited</i> format:
          <ul>
            <li>The first non-blank line of the file must be a <i>column header line</i> in which:
              <ul>
                <li>The first character is '#'</li>
                <li>The first column header is 'name'</li>
                <li>The remaining column headers are your <i>Sample Name</i></li>
              </ul>
            </li>
            <li>Thus the file is a simple matrix in which each Sample named in the file will have a score for each Gene, Pathway, Taxon, named in the first column.
              <ul>
                <li>If a Sample has NO score, you can leave the column blank or put just a dot ('.').</li>
              </ul>
            </li>
            <li>All rows MUST have the same number of fields/columns.</li>
          </ul>
          <br>&nbsp;<br>
          The names of the Genes, Pathways, Taxa, must match those available to the microbiome analysis tools we host. These generally come from well-known repositories and public database sets.
          <br>&nbsp;<br>
          You can either drag a file which has already been uploaded via the <u>Transfer File</u> utility or you can select a file to import from your machine. We encourage you to provide compressed files such as  zip, .gz, or .bz2
          <br>&nbsp;<br>
        "
      })
  %>
   <%# Input data help %>
  <%=
     renderFrag(@toolIdStr, :wbDialogSection,
    {
      :sectionTitle => "Input Files:",
      :sectionHtml =>
        renderFrag(@toolIdStr, :wbTrackOrFileListSummary, { :trackOrFileList => @inputs, :label => "File Of Interest" } )
    })
  %>
  <%# Output database summary %>
  <%= renderFrag(@toolIdStr, :wbDialogSection,
      {
        :sectionTitle => "Output Database/Files:",
        :sectionHtml => renderFrag(@toolIdStr, :wbDatabaseListSummary, { :databaseList => @outputs[0] } )
      })
  %>
  <%# Tool-specific UI widgets user provides/reviews %>
  <%=
      annoType = @settings['annoTypeValues']
      metricType = @settings['metricTypeValues']
      annoTypeHash = Hash.new { |hh,kk|
        hh[kk] = {}
      }
      metricTypeHash = Hash.new { |hh,kk|
        hh[kk] = {}
      }
      count = 0
      annoType.each_key { |key|
        if(count == 0)
          annoTypeHash[:"#{key}"] = { :label => "#{key}", :selected => true  }
        else
          annoTypeHash[:"#{key}"] = { :label => "#{key}" }
        end
        count += 1
      }
      metricType.each_key { |key|
        if(count == 0)
          metricTypeHash[:"#{key}"] = { :label => "#{key}", :selected => true  }
        else
          metricTypeHash[:"#{key}"] = { :label => "#{key}" }
        end
        count += 1
      }
      widgets = []
      if(@inputs.size == 0)
        widgets.push(
                      { :id => 'wbContext', :type => :hidden },
                      { :id => 'uploadFile', :label => 'Select File', :type => :file },
                      { :id => 'subdirs', :type => :text , :value => "Raw Data Files", :hidden => true }
                    )
      end
      widgets.push(
                    { :id => 'subtype', :type => :text, :value => "Data", :label => "Track Subtype"},
                    { :id => 'annoType', :type => :select, :options => annoTypeHash, :label => "Annotation Type"},
                    { :id => 'metricType', :type => :select, :options => metricTypeHash, :label => "Metric Type"}
                    # TODO: need 2 droplists, nominally the annotation type and the metric type.
                    # JobHelper will use those too look up
                    # Not like this (and no dbrcKey from config...wtf?):
                    # { :id => "roiTrack", :label =>'Reference ROI Track', :type => :selectOnAttribute, :userId => @context['userId'], :rackEnv => @rackEnv, :size => '5', :trkListDBRCKey => "#{trkListDBRCKey}", :rcscUri => "#{rcscUri}", :attributeName => 'gbArrayROITrack', :attributeValue => 'true', :selectByDefault => :none, :multiSelect => false, :toggleAllButton => false},
                    # Ask user (see help):
                    # - Annotation Type
                    # - Metric Type
                    # Get the possible values of these 2 drop lists from the "probe" tracks. By first: getting ALL tracks which have :attributeName => 'gbMicrobiomeResultROITrack'; the values for Annotation Type are in attribute mbwAnnoationType; the values for Metric Type are in attribute mbwMetricType
                    # Now this UI can pick up new anno types and new metric types just by looking at the "probe" tracks dynamically. Great.
                    # The JobHelper can take the user's selections for these two droplists and look up the track. You could even use the track attribute map for this since you know the two attributes you want values for...
                  )

      renderFrag(@toolIdStr, :wbToolSettingsUI,
      {
        :sectionTitle => "Settings",
        :widgets => widgets
      })
  %>
  <%= renderStaticFrag(@toolIdStr, :wbToolButtons,
      {
        :buttons => [ { :type => :submit }, { :type => :cancel} ]
      })
  %>
</form>
<%= WorkbenchFormHelper.renderInlineScriptFrag(["#{@genbConf.cacheDirBasePath}/javaScripts/progressUpload.js", "#{@genbConf.toolViewRoot}/uploadDbFile/uis/UploadDbFile.js"]) if(@inputs.size == 0) %>
<%
  else
%>
<%= renderFrag(@toolIdStr, :wbToolHelpOverview,
      { :toolHelpOverview =>
        "
          <img src='/images/workbench/underConstruction_wikipedia_free_74x64.png' style='float:left; padding: 0px 4px 10px 4px; width:74px; height:64px;'>
          <div style='float: left; width: 288px; margin-top: 10px ; color: red;'>This tool is currently in review. Thus, the tool is currently only available to the authors, testers, and reviewers.</div>
          <span style='color: red;'>Prototype will be made available for evaluation as soon as possible.</span>
        "
      })
  %>
  <%# Cancel Button %>
  <%= renderFrag(@toolIdStr, :wbToolButtons,
      {
        :buttons => [ { :type => :cancel} ]
      })
  %>
</form>
<%
  end
%>
