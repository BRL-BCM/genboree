<%# RENDER HTML%>
<%
  require 'brl/genboree/rest/helpers/trackApiUriHelper'
  require 'brl/genboree/rest/helpers/classApiUriHelper'
  require 'brl/genboree/rest/helpers/databaseApiUriHelper'
  require 'brl/genboree/rest/helpers/groupApiUriHelper'
  require 'brl/genboree/rest/wrapperApiCaller'
  require 'uri'
  require 'json'
  width = (@hasAccess ? 600 : 320)
  height = (@hasAccess ? 500 : 320)
%>
<form id="wbDialogForm" name="wbDialogForm" action="wbDefault" style="width: <%=width%>px; height: <%=height%>px;" onsubmit="return submitToolJob(this);" method="POST" class="wbDialog wbForm" >
  <%# Tool Title %>
  <%= renderStaticFrag(@toolIdStr, :wbToolTitle) %>
<%
  if(@hasAccess)
%>
  <%# Overview text %>
  <%= renderStaticFrag(@toolIdStr, :wbToolOverview,
      { :toolOverview =>
        "
          This tool can be used to launch the <a href=\"http://genome.ucsc.edu/cgi-bin/hgGateway\" target=\"_blank\"<a>UCSC Genome Browser</a> for visualizing tracks that have already been imported in Genboree and have bigwig/bigbed
          files associated with them. To generate bigwig/bigbed files for tracks, use the 'Generate BigWig Files' and/or 'Generate BigBed Files' tools.
          <br>&nbsp;<br>
          You can either drag a track class or a track entity-list or a database (to visualize all tracks within that class/entity-list/database) or drag tracks individually into &quot;Input Data&quot;.
          <br>&nbsp;<br>
          Each track will be associated with either one (bigwig or bigbed) or two (bigwig and bigbed) or no checkboxes (none generated). You can check the available checkboxes to visualize the track in the selected format (bigwig/bigbed)
          <br>&nbsp;<br>
          Generally, bigwig files are generated for tracks that were uploaded as wig(variableStep/fixedStep) or bedgraph and bigbed files are generated for tracks that were uploaded as other formats.
          <br>&nbsp;<br>
          If you are dragging tracks over from multiple databases/hosts, you can mouse over each track name in the settings dialog to get more context information. This includes the host, group and the database name
          the track is coming from. 
          <br>&nbsp;<br>
        "
      })
  %>
  <%
    # For all input tracks see if they have 'bigwig'/'bigbed' files

    grpApiHelper = BRL::Genboree::REST::Helpers::GroupApiUriHelper.new()
    dbApiHelper = BRL::Genboree::REST::Helpers::DatabaseApiUriHelper.new()
    trkHash = @settings['trkHash']
    trkArray = []
    rowKeyArray = []
    urlHash = {}
    minConditions = false # This variable should be set to true to render the dialog. At least one track should have either a bigwig or a bigbed file
    trkHash.each_key { |dbUri|
      uriObj = URI.parse(dbUri)
      host = uriObj.host
      grp = grpApiHelper.extractName(dbUri)
      dbName = dbApiHelper.extractName(dbUri)
      apiCaller = WrapperApiCaller.new(host, "#{uriObj.path}/trks?detailed=minDetails", @context['userId'])
      apiCaller.initInternalRequest(@rackEnv, @genbConf.machineNameAlias) if(@rackEnv)
      apiCaller.get()
      resp = JSON.parse(apiCaller.respBody)['data']
      resp.each { |trk|
        name = trk['name']
        if(trkHash[dbUri].key?(name))
          bigwigCheckbox = bigbedCheckbox = true
          if(trk['bigWig'] == 'none')
            bigwigCheckbox = false
            bigwigValue = 'no file'
          end
          if(trk['bigBed'] == 'none')
            bigbedCheckbox = false
            bigbedValue = 'no file'
          end
          trkArray << [ { 'name' => {:value => name, :checkbox => false, :title => "#{host} \: #{grp} - #{dbName}" } }, { 'bigWig' => { :value => bigwigValue, :checkbox => bigwigCheckbox } }, { 'bigBed' => { :value => bigbedValue, :checkbox => bigbedCheckbox } } ]
          rowKeyArray << name
          urlHash[name] = trk['refs'][BRL::Genboree::REST::Data::DetailedTrackEntity::REFS_KEY]
          if(trk['bigWig'] != 'none' or trk['bigBed'] != 'none')
            minConditions = true
          end
        end
      }
    }

  %>

  <%
    if(minConditions)
  %>
    <%# Input data help %>
    <%=
      renderFrag(@toolIdStr, :wbDialogSection,
      {
        :sectionTitle => "All tracks belong to:",
        :sectionHtml =>
          renderFrag(@toolIdStr, :wbDatabaseListSummary, { :databaseList => trkHash.keys} )
      })
    %>
    <%# Tool-specific UI widgets user provides/reviews %>
    <%=
      renderFrag(@toolIdStr, :wbToolSettingsUI,
      {
        :sectionTitle => "Launch UCSC Browser",
        :widgets =>
        [
          { :id => "trkArray", :label => "", :labelWidth => "60px", :rowKeys => rowKeyArray, :type => :tabularCheckboxSection, :rows => trkArray, :headerRow => ['Track', 'BigWig', 'BigBed'],  :colIdxReqToggleBtn => [1,2], :urlHash => urlHash, :addKeyWithUrl => true },
          { :id => "baseWidget", :label => "", :hidden => true, :type => :text, :value => 'trkArray'}
        ]
      })

    %>
    <%= renderStaticFrag(@toolIdStr, :wbToolButtons,
        {
          :buttons => [ { :type => :submit }, { :type => :cancel} ]
        })
    %>
    </form>
  <%
    else
  %>
    <%= renderFrag(@toolIdStr, :wbSpecialInfoSection,
      {
        :sectionTitle => "NO BigWig/BigBed:",
        :sectionType => :warningInfoSection,
        :sectionHtml => "None of the tracks in this database have bigwig/bigbed files associated with them. Please generate bigwig and/or bigbed files using the 'Generate BigWig Files' or 'Generate BigBed Files' tools."
      })
    %>
  <%
    end
  %>
<%
  else
%>
  <%= renderFrag(@toolIdStr, :wbToolHelpOverview,
        { :toolHelpOverview =>
          "
            <img src='/images/workbench/underConstruction_wikipedia_free_74x64.png' style='float:left; padding: 0px 4px 10px 4px; width:74px; height:64px;'>
            <div style='float: left; width: 288px; margin-top: 10px ; color: red;'>This tool is currently in review. Thus, the tool is currently only available to the authors, testers, and reviewers.</div>
            <span style='color: red;'>Prototype will be made available for evaluation as soon as possible.</span>
          "
        })
    %>
    <%# Cancel Button %>
    <%= renderFrag(@toolIdStr, :wbToolButtons,
        {
          :buttons => [ { :type => :cancel} ]
        })
    %>
  </form>
<%
  end
%>
