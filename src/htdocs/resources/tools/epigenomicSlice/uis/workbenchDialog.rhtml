<%# RENDER HTML %>
<%
  require 'brl/genboree/rest/helpers/databaseApiUriHelper'
  require 'brl/genboree/genboreeUtil'
  width = (@hasAccess ? 500 : 320)
  height = (@hasAccess ? 425 : 320)

  formTag = "<form id=\"wbDialogForm\" name=\"wbDialogForm\" action=\"wbDefault\" style=\"width: #{width}px; height: #{height}px;\" onsubmit=\"return submitToolJob(this);\" method=\"POST\" class=\"wbDialog wbForm\" >"
%>
  <%= formTag %>
  <%# Tool Title %>
  <%= renderStaticFrag(@toolIdStr, :wbToolTitle) %>
  <%# Overview text %>
<%
  if(@hasAccess)
%>
  <%= renderStaticFrag(@toolIdStr, :wbToolOverview,
      { :toolOverview =>
        "
          This tool extracts epigenomic data in a TAB delimited format suitable for viewing using Microsoft Excel and for use in further off-line
          analysis by a user.
          To set up the analysis:
          <br>&nbsp;<br>
          <ul>
            <li>epigenomic experiment score tracks *AND/OR*</li>
            <li>epigenomic experiments sets (termed entity lists) selected by a user
                using an Epigenomic Grid view</li>
            <li>a track of regions of interest (ROI)</li>
          </ul>
          <p></p>
          The tools projects each of the epigenomic experiments score tracks over the ROIs. Next, it collates the scores for each experiment into one data
          matrix, having the experiments as column headers and the particular ROIs as rows. A user will be able to download this matrix as a TAB-delimited file.
        "
      })
  %>
  <%

  %>
  <%=
  inputHash = {}
  #$stderr.debugPuts(__FILE__,__method__,"@inputs",@inputs.inspect)
  @inputs.sort_by{|xx| File.basename(xx).downcase}
  @inputs.each{|input|$stderr.debugPuts(__FILE__,__method__,"input",input.inspect)
    inputHash[input] = true}
  #$stderr.debugPuts(__FILE__,__method__,"@inputs",inputHash.inspect)
    renderFrag(@toolIdStr, :wbDialogSection,
    {
      :sectionTitle => "Input Tracks:",
      :sectionHtml =>
        renderFrag(@toolIdStr, :wbMultiSelectInputList, { :multiSelectInputHash => inputHash, :label => "Choose tracks to slice", :type => "tracks" } )
    })
  %>

  <%# Input resource summary %>
   <%# renderFrag(@toolIdStr, :wbDialogSection,
      {
       :sectionTitle => "Input Files Directory:",

       :sectionHtml => renderFrag(@toolIdStr, :wbDatabaseListSummary, { :databaseList => @inputs[0] } )+
       renderFrag(@toolIdStr, :wbTrackListSummary, { :trackList => @inputs[1 .. -1], :label => "Targets" } )
      })
  %>
  <%# Output resource summary %>
  <%= renderFrag(@toolIdStr, :wbDialogSection,
        {
          :sectionTitle => "Output Database:",
          :sectionHtml =>
            renderFrag(@toolIdStr, :wbProjectOrDatabaseListSummary, { :projectOrDatabaseList => @outputs, :label => "Database/Projects Of Interest" } )
        })
  %>
  <%# Tool-specific UI widgets user provides/reviews %>
  <%=

    renderFrag(@toolIdStr, :wbToolSettingsUI,
    {
      :sectionTitle => "Epigenomic Slice Tool",
      :widgets => [
                    { :id => 'analysisName', :label => 'Analysis Name', :labelWidth => "200px", :type => :text , :size => "45", :value => "EpigenomicSlice#{Time.now.strftime('%Y-%m-%d-%H:%M:%S')}" },
                    { :id => 'removeRoiDuplicates', :label => 'Remove Duplicate ROI Regions?', :labelWidth => "200px", :type => :checkBox, :checked => false},
                    { :id => 'roiTrkSelect', :label => 'Select ROI Track', :labelWidth => "200px", :type => :selectEntityFromList , :setAs => 'roiTrack', :inputs => @inputs, :addEntityListContents => true, :trkSrcAsTitle => true,:rackEnv => @rackEnv, :title => "Select the Regions of Interest (ROI) track you wish to run the tool with.", :userId => @context['userId'], :entityType => :trk },
                    { :id => 'spanAggFunction', :label => 'Aggregating Function', :labelWidth => "200px", :type => :select, :options =>
                        {
                        :avg   => { :label => 'Avg', :selected => true },
                        :med => { :label => 'Median'},
                        :sum  => { :label => 'Sum'},
                        :count    => { :label => 'Count'},
                        :max    => { :label => 'Max'},
                        :min    => { :label => 'Min'},
                        :stdev    => { :label => 'Standard Deviation'},
                        :avgByLength  => { :label => 'Avg By Length'}
                      }
                    },
                    { :id => "naAdvSec", :type => :advancedSection, :toggleText => "No Data Regions", :startWithExpanded => false,
                      :widgets =>
                      [
                        { :id => 'replaceNAValue', :label => 'No Data Value', :type => :text , :size => "6", :value => "0" },
                        { :id => 'removeNoDataRegions', :label => 'Remove No Data Regions?', :labelWidth => "200px", :type => :checkBox, :checked => true, :onchange=>"toggleVisibility('naSection');"},
                        { :id => 'naSection', :type => :indentedSection, :indentWidth => '20px', :spanFullRow => true, :border => '', :label => '',
                          :widgets =>
                          [
                            { :name=>"naGroup", :id => 'anyTrack', :value=>"0", :label => 'If ANY track has no data for that region', :labelWidth => "300px", :labelStyle => "font-weight:normal; font-size: 0.82em;", :type => :radio, :checked => true, :onchange => "clearAndDisable('naPercentage');" },
                            { :name=>"naGroup", :id => 'allTracks',:value=>"100", :label => 'If ALL tracks have no data for that region', :labelWidth => "300px", :labelStyle => "font-weight:normal; font-size: 0.82em;", :type => :radio, :onchange => "clearAndDisable('naPercentage');" },
                            { :name=>"naGroup", :id => 'custTracks',:value=>"custom", :label => 'If % of tracks with no data for that region &ge;', :labelWidth => "300px", :labelStyle => "font-weight:normal; font-size: 0.82em;", :type => :radio, :onchange => "toggleDisabled('naPercentage');"},
                            { :id => 'percentageSection', :type => :indentedSection, :indentWidth => '40px', :spanFullRow => true, :border => '', :label => '',
                              :widgets =>
                              [
                                { :id => 'naPercentage', :label => '(%)', :labelWidth => "15px", :labelStyle => 'color: #A4A4A4; font-weight:normal; font-size: 0.82em; text-align: right;', :type => :text , :size => "5", :value => "", :disabled => true }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]

    })
  %>
  <%= renderStaticFrag(@toolIdStr, :wbToolButtons,
      {
        :buttons => [ { :type => :submit, :onClick => "return removeSelectedEntity('roiTrkSelect');" }, { :type => :cancel} ]
      })
  %>
</form>
<%= WorkbenchFormHelper.renderInlineScriptFrag(["#{@genbConf.cacheDirBasePath}/javaScripts/progressUpload.js", "#{@genbConf.toolViewRoot}/uploadDbFile/uis/UploadDbFile.js"]) if(@inputs.size == 0) %>
<script type="text/javascript">

function toggleDisabled(elementId)
{
  var element = Ext.get(elementId) ;
  var elementLabel = Ext.get(elementId + "LabelTh") ;
  if(element)
  {
    if(element.getAttribute("disabled"))
    {
      elementLabel.setStyle("color", "black") ;
      element.dom.enable() ;
    }
    else
    {
      elementLabel.setStyle("color", "#A4A4A4") ;
      element.dom.disable() ;
    }
  }
}

function toggleVisibility(elementId)
{
  var element = document.getElementById(elementId) ;
  if(element)
  {
    if(element.attributes.getNamedItem("hidden"))
    {
      element.hidden = false ;
    }
    else
    {
      element.hidden = true ;
    }
  }
}

function clearAndDisable(elementId)
{
  var element = Ext.get(elementId) ;
  var elementLabel = Ext.get(elementId + "LabelTh") ;
  if(element)
  {
    elementLabel.setStyle("color", "#A4A4A4") ;
    element.dom.value = "" ;
    element.dom.disable() ;
  }
}

</script>
<%
  else # user doesn't have access
%>
   <%= renderFrag(@toolIdStr, :wbToolHelpOverview,
      { :toolHelpOverview =>
        "
          This tool is currently under development and only available internally and to some collaborators for testing.
          <br>&nbsp;<br>
          <img src='/images/workbench/underConstruction_wikipedia_free_74x64.png' style='float:left; padding: 0px 4px 10px 4px; width:74px; height:64px;'>
          <div style='float: left; width: 288px; margin-top: 10px ; color: red;'>
          <br>
          <span style='color: red;'>Once development is complete, and testing and review carried out, the tool will be available for all users.</span>
        "
      })
  %>
  <%# Cancel Button %>
  <%= renderFrag(@toolIdStr, :wbToolButtons,
      {
        :buttons => [ { :type => :cancel} ]
      })
  %>
<%
  end # if(@hasAccess)
%>
