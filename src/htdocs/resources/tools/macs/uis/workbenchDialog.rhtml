<%# RENDER HTML %>
<%
  require 'brl/genboree/rest/helpers/databaseApiUriHelper'
  require 'brl/genboree/rest/helpers/fileApiUriHelper'
  require 'brl/genboree/rest/apiCaller'
  require "brl/db/dbrc"
  require 'uri'
  require 'json'
  width = (@hasAccess ? 500 : 320)
  height = (@hasAccess ? 425 : 320)
  formTag = "<form id=\"wbDialogForm\" name=\"wbDialogForm\" action=\"wbDefault\" style=\"width: #{width}px; height: #{height}px;\" onsubmit=\"return submitToolJob(this);\" method=\"POST\" class=\"wbDialog wbForm\" >"
%>
  <%= formTag %>
  <%# Tool Title %>
  <%= renderStaticFrag(@toolIdStr, :wbToolTitle) %>
<%
  if(@hasAccess)
%>
  <%# Overview text %>
  <%= renderStaticFrag(@toolIdStr, :wbToolOverview,
      { :toolOverview =>
        "
          <p>Model-based Analysis of ChIP-Seq data (MACS) analyzes data generated by short read sequencers to identify Chip-Seq peaks (i.e. protein-DNA interaction sites). MACS empirically models the length of the sequenced ChIP fragments, and uses it to improve the spatial resolution of predicted binding sites. MACS also uses a dynamic Poisson distribution to effectively capture local biases in a genome sequence, allowing for more sensitive and robust predictions.  MACS can be used for ChiP-Seq experiments with or without control samples.</p>


          <p>To set up the MACS analysis:</p>


          Populate <strong>Input Data</strong>
          <ul>
          <li>Upload the input files of interest using:  <code>Data</code> &raquo; <code>Files</code> &raquo; <code>Transfer File</code></li>
            <li>Drag the input file(s) into <strong>Input Data</strong></li>
          </ul>


        <blockquote>

          <p>Please note:  input file(s) can be any of the following formats:  BED, BAM, SAM, ELAND, ELANDMULTI, ELANDEXPORT, ELANDMULTIPET, BOWTIE.</p>


        </blockquote>

        <blockquote>

          <p>If using BAM files, the entrypoint/chromosome names in the file(s) must match the naming used in the target database.  <br />For example, if using a hg19 database as the target database, the chromosomes must be 'chr 1', chr 2', 'chr 3', etc and not '1', '2', '3'.</p>


        </blockquote>

        Populate <strong>Output Targets</strong>
          <ul>
          <li>Drag a database into <strong>Output Targets</strong> (the MACS  results will be deposited into this database)</li>
          </ul>


        Configure &#38; Submit the MACS Job
          <ul>
          <li>Select: <code>Cistrome</code>  &raquo; <code>Call Chip-Seq Peaks by</code> &raquo; <code>MACS</code></li>
            <li>Use default or select new MACS settings (also note the option to select MACS 1.4 or MACS 2.0.10).</li>
            <li>Click <code>Submit</code></li>
          </ul>


        MACS will output these files (in the Data Selector under Files, in the database provided in <strong>Output Targets</strong>):
          <ul>
          <li><em>peaks.xls</em> (for each peak contains: chromosome, start base, end base, length, summit - location with highest fragment pileup and predicted as the precise binding location, number of sequence reads for that peak, a confidence value in the form of -10*log10 (p-value) where a value of 100 means a p-value of 1 raised to -10 and a value of 150 means a  p-value of 1 raised to -15, and fold-enrichment (regions with tags more than mfold enriched relative to a random tag genome distribution)</li>
            <li><em>Chip-Seq:tags.lff.zip</em></li>
            <li><em>jobFile.json</em></li>
            <li>raw data files: <em>model.r.zip</em>, <em>peaks.bed.zip</em>, <em>summits.bed.zip</em></li>
            <li><em>summary.txt</em></li>
          </ul>
        "
      })
  %>
  <%# Input resource summary %>
  <%=
    # The input has been normalized at this point
    renderFrag(@toolIdStr, :wbDialogSection,
    {
      :sectionTitle => "Input Files:",
      :sectionHtml =>
        renderFrag(@toolIdStr, :wbFileListSummary, { :filesList => @inputs, :label => "Files Of Interest" } )
    })
  %>
  <%# Output database summary %>
  <%=
      renderFrag(@toolIdStr, :wbDialogSection,
      {
        :sectionTitle => "Output Location:",
        :sectionHtml => renderFrag(@toolIdStr, :wbDatabaseListSummary, { :databaseList => @outputs } )
      })
  %>
  <%# Tool-specific UI widgets user provides/reviews %>
  <%=
    fileApiHelper = BRL::Genboree::REST::Helpers::FileApiUriHelper.new()
    widgets1 =
              [
                { :id => 'analysisName', :label => 'Analysis Name', :type => :text, :size => "25", :value => "MACS-#{Time.now.strftime('%Y-%m-%d-%H:%M:%S').gsub('-0', '-')}", :title => 'The top-level output folder used to organize MACS results.' },
                { :id => 'resultsName', :label => 'Results Name', :type => :text, :size => "25", :value => "MACS-#{Time.now.strftime('%Y-%m-%d-%H:%M:%S').gsub('-0', '-')}", :title => "The name string of the experiment. MACS will use this string NAME to create output files like 'NAME_peaks.xls', 'NAME_negative_peaks.xls', 'NAME_peaks.bed' , 'NAME_summits.bed', 'NAME_model.r' and so on"},
                { :id => 'slocal', :label => 'Small Local', :type => :text, :size => "6", :value => "1000", :title => "The small nearby region in basepairs to calculate dynamic lambda. This is used to capture the bias near the peak summit region. Invalid if there is no control data. [Default: 1000]"},
                { :id => 'llocal', :label => 'Large Local', :type => :text, :size => "6", :value => "10000", :title => "The large nearby region in basepairs to calculate dynamic lambda. This is used to capture the surround bias. [Default: 10000]"},
                { :id => 'pValue', :label => 'P Value', :type => :text, :size => "6", :value => "1e-5", :title => "Pvalue cutoff for peak detection. [Default: 1e-5]"},
                { :id => 'mFold', :label => 'M Fold', :type => :text, :size => "6", :value => "10 30", :title => "Pvalue cutoff for peak detection. [Default: 10 30]"},
                { :id => 'doUploadResults', :label => 'Upload Results ?', :type => :checkbox, :title => 'Check to upload results to Genboree.', :onClick => "displayTrackName(this.checked)" },
                { :id => 'trackName', :label => 'Track Name', :type => :gbTrackName, :defaultType => 'ChIP-Seq', :hideTrackName => true, :defaultSubtype => 'tags', :hidden => true, :title => 'For uploading resulting track, provide an LFF-style track name. Preferably not an existing track in the output database.'},
                { :id => 'noLambda', :label => 'No Lambda', :type => :checkbox, :onclick => "toggleLambdaValues(this.checked)", :title => "If True, MACS will use fixed background lambda as local lambda for every peak region. Normally, MACS calculates a dynamic local lambda to reflect the local bias due to potential chromatin structure. [Default: FALSE]"},
                { :id => 'offAuto', :label => 'Off Auto', :type => :checkbox, :title => "Whether turn off the auto pair model process. If not set, when MACS failed to build paired model, it will use the nomodel settings, the '--shiftsize' parameter to shift and extend each tags. [Default: FALSE]"},
                { :id => 'noModel', :label => 'No Model', :type => :checkbox, :onclick => "toggleShiftSize(this.checked)", :title => "Whether or not to build the shifting model. If True, MACS will not build model. by default it means shifting size = 100, try to set shiftsize to change it. [Default: FALSE]"},
                { :id => 'ssize', :label => 'Shift Size', :type => :text, :size => "6", :hidden => true, :disabled => true, :value => "100", :title => "The arbitrary shift size in bp. When nomodel is true, MACS will use this value as 1/2 of fragment size. [Default: 100]"},

                { :id => 'macsVersion', :label => 'MACS Version', :type => :select, :title => "Version of MACS to use. [Default: 1.4]",
                  :options =>
                  {
                    :'1.4' => { :label => "1.4" },
                    :'2' => { :label => "2.0.10", :selected => true }
                  }
                }
              ]
    if(@inputs.size == 1)
      widgets1 <<
                { :id => 'format', :label => 'File Format', :type => :select, :title => "Select the format of your file",
                  :options =>
                  {
                    :'bed' => { :label => "BED", :selected => true },
                    :'bam' => { :label => "BAM" },
                    :'sam' => { :label => "SAM" },
                    :'eland' => { :label => "ELAND" },
                    :'elandMulti' => { :label => "ELANDMULTI" },
                    :'elandExport' => { :label => "ELANDEXPORT" },
                    :'elandMultipet' => { :label => "ELANDMULTIPET" },
                    :'bowtie' => { :label => "BOWTIE" }
                  }
                }
      widgets1 << { :id => "tc_#{@inputs[0]}", :type => :text, :hidden => true, :value => "treatment" }
    end
    fileOptsRecs = []
    widgets2 = []
    if(@inputs.size == 2) # If we have only input file, it will be assumed to be treatment.
      count = 0
      @inputs.each { |input|
        if(count == 0)
          fileOptsRecs << [
                            { :file => { :value => fileApiHelper.extractName(input), :checkbox => false } },
                            { :"tc_#{input}" => { :value => { :treatment => { :label => 'Treatment', :selected => true }, :control => { :label => 'Control'} }, :checkbox => false } },
                            { :"format_#{input}" => { :value =>
                                                      {
                                                        :'bed' => { :label => "BED", :selected => true },
                                                        :'bam' => { :label => "BAM" },
                                                        :'sam' => { :label => "SAM" },
                                                        :'eland' => { :label => "ELAND" },
                                                        :'elandMulti' => { :label => "ELANDMULTI" },
                                                        :'elandExport' => { :label => "ELANDEXPORT" },
                                                        :'elandMultipet' => { :label => "ELANDMULTIPET" },
                                                        :'bowtie' => { :label => "BOWTIE" }
                                                      },
                                                      :checkbox => false
                                                    }
                            }

                          ]
        else
         fileOptsRecs << [
                            { :file => { :value => fileApiHelper.extractName(input), :checkbox => false } },
                            { :"tc_#{input}" => { :value => { :treatment => { :label => 'Treatment'}, :control => { :label => 'Control', :selected => true} }, :checkbox => false } },
                            { :"format_#{input}" => { :value =>
                                                      {
                                                        :'bed' => { :label => "BED", :selected => true },
                                                        :'bam' => { :label => "BAM" },
                                                        :'sam' => { :label => "SAM" },
                                                        :'eland' => { :label => "ELAND" },
                                                        :'elandMulti' => { :label => "ELANDMULTI" },
                                                        :'elandExport' => { :label => "ELANDEXPORT" },
                                                        :'elandMultipet' => { :label => "ELANDMULTIPET" },
                                                        :'bowtie' => { :label => "BOWTIE" }
                                                      },
                                                      :checkbox => false
                                                    }
                            }

                          ]
        end
        count += 1
      }

      widgets2 << { :id => "fileOpts", :type => :advancedSection, :toggleText => "File Settings", :startWithExpanded => true, :widgets =>
                    [
                      { :id => "fileOptsRecs", :label => '', :labelWidth => "10px", :colspanForToggleBtn => "5", :fontSize => "11px", :cellspacing => "0", :colSpan => "2", :spanFullRow => true, :leftPadding => "10px", :bottomPadding => "10px",
                      :type => :tabularCheckboxSection, :rows => fileOptsRecs, :headerRow => ['File', 'Treatment/Control', 'Format'], :valign => "middle", :cellBottomPadding => "5px", :noToggleBtn => true }
                    ]
                  }
    end
    widgets = widgets1 + widgets2
    renderFrag(@toolIdStr, :wbToolSettingsUI,
    {
      :sectionTitle => "MACS Settings",
      :widgets => widgets
    })
  %>
  <%= renderStaticFrag(@toolIdStr, :wbToolButtons,
      {
        :buttons => [ { :type => :submit }, { :type => :cancel} ]
      })
  %>
</form>
<script type="text/javascript">
Ext.QuickTips.init() ;
function toggleLambdaValues(checked)
{
  var llocal = Ext.get('llocal') ;
  var llocalDom = Ext.get('llocal').dom ;
  var llocalLabel = Ext.get('llocalLabel') ;
  var slocal = Ext.get('slocal') ;
  var slocalDom = Ext.get('slocal').dom ;
  var slocalLabel = Ext.get('slocalLabel') ;
  if(checked)
  {
    llocal.setStyle('display', 'none') ;
    llocalDom.disabled = true ;
    llocalLabel.setStyle('display', 'none') ;
    slocal.setStyle('display', 'none') ;
    slocalDom.disabled = true ;
    slocalLabel.setStyle('display', 'none') ;
  }
  else
  {
    llocal.setStyle('display', '') ;
    llocalDom.disabled = false ;
    llocalLabel.setStyle('display', '') ;
    slocal.setStyle('display', '') ;
    slocalDom.disabled = false ;
    slocalLabel.setStyle('display', '') ;
  }
}

function toggleShiftSize(checked)
{
  var ssize = Ext.get('ssize') ;
  var ssizeDom = Ext.get('ssize').dom ;
  var ssizeLabel = Ext.get('ssizeLabel') ;
  if(checked)
  {
    ssize.setStyle('display', '') ;
    ssizeLabel.setStyle('display', '') ;
    ssizeDom.disabled = false ;
  }
  else
  {
    ssize.setStyle('display', 'none') ;
    ssizeLabel.setStyle('display', 'none') ;
    ssizeDom.disabled = true ;
  }
}

function displayTrackName(checked)
{
  var lffType = Ext.get('lffType').dom ;
  var lffSubType = Ext.get('lffSubType').dom ;
  var wigTracklabel = Ext.get("trackNameLabel") ;
  if(checked)
  {
    lffType.disabled = false ;
    lffSubType.disabled = false ;
    lffType.style.visibility = '' ;
    lffSubType.style.visibility = '' ;
    wigTracklabel.setStyle('display', '') ;
  }
  else
  {
    lffType.style.visibility = 'hidden' ;
    lffType.disabled = true ;
    lffSubType.style.visibility = 'hidden' ;
    lffSubType.disabled = true ;
    wigTracklabel.setStyle('display', 'none') ;
  }
}

</script>
<%
  else
%>
<%= renderFrag(@toolIdStr, :wbToolHelpOverview,
      { :toolHelpOverview =>
        "
          <img src='/images/workbench/underConstruction_wikipedia_free_74x64.png' style='float:left; padding: 0px 4px 10px 4px; width:74px; height:64px;'>
          <div style='float: left; width: 288px; margin-top: 10px ; color: red;'>This tool is currently in review. Thus, the tool is currently only available to the authors, testers, and reviewers.</div>
          <span style='color: red;'>Prototype will be made available for evaluation when ready.</span>
        "
      })
  %>
  <%# Cancel Button %>
  <%= renderFrag(@toolIdStr, :wbToolButtons,
      {
        :buttons => [ { :type => :cancel} ]
      })
  %>
</form>
<%
  end
%>
