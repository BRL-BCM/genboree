<%# RENDER HTML%>
<%
require 'brl/genboree/rest/apiCaller'
require 'brl/genboree/rest/helpers/databaseApiUriHelper'
require "brl/db/dbrc"
require 'brl/genboree/genboreeUtil'
require 'uri'
require 'json'
%>
<form id="wbDialogForm" name="wbDialogForm" action="wbDefault" style="width: 520px; height: 420px;" onsubmit="return submitToolJob(this);" method="POST" class="wbDialog wbForm" >

  <%# Tool Title %>
  <%= renderStaticFrag(@toolIdStr, :wbToolTitle) %>
  <%# Overview text %>
  <%= renderStaticFrag(@toolIdStr, :wbToolOverview,
      { :toolOverview =>
        "
          This tool will run the alpha diversity pipeline on the OTU table generated by a <span class='wbHelpMono'>QIIME</span> pipeline.
          Four different types of alpha diversity are currently evaluated:
          <br>&nbsp;<br>
          <img src='/images/workbench/help/microbiomeWorkbench/alphaDiversity_plots.png' style='margin:8px;width:186;height:96;' align='right'>
          <ul>
            <li>Diversity indices</li>
            <li>Rank abundance</li>
            <li>Renyi profile</li>
            <li>Richness</li>
          </ul>
          <br>
          In addition to archives containing the corresponding plots and raw data, you can arrange to browse the plots online.
          <br>&nbsp;<br>
          <div style='width:100%; text-align:center; font-size: 80%;'><i>Additional details about the ouput files are provided in the </i>Addendum<i> at the bottom of the Help dialog.</i></div>
        "
      })
  %>

  <%# Input data summary %>
  <%= renderFrag(@toolIdStr, :wbDialogSection,
      {
        :sectionTitle => "Input Files Directory:",
        :sectionHtml => renderFrag(@toolIdStr, :wbFileDirSummary, { :fileList => @inputs } )
      })
  %>

  <%# Output database summary %>
  <%= if(@outputs.size == 1)
        renderFrag(@toolIdStr, :wbDialogSection,
        {
          :sectionTitle => "Output Database:",
          :sectionHtml => renderFrag(@toolIdStr, :wbDatabaseListSummary, { :databaseList => @outputs } )
        })
      else
        renderFrag(@toolIdStr, :wbDialogSection,
        {
          :sectionTitle => "Output Database/Project:",
          :sectionHtml =>
            renderFrag(@toolIdStr, :wbProjectOrDatabaseListSummary, { :projectOrDatabaseList => @outputs, :label => "Database/Projects Of Interest" } )
        })
      end
  %>
  <%# Tool-specific UI widgets user provides/reviews %>
  <%=
    # Get the list of samples to display
    # Check if input folder is part of the "QIIME" tree
    inputFolderPath = @inputs[0]
    if(inputFolderPath !~ /\/QIIME\//)
      wue = BRL::Genboree::Tools::WorkbenchUIError.new(:'Precondition Failed', "MISSING_DIRECTORY: Input folder/directory for Alpha Diversity needs to be part of the 'QIIME' folder ")
      raise wue
    end
    fileUri = @inputs[0].gsub("/files", "/file")
    fileUri = fileUri.chomp("?")
    fileUri << "/sample.metadata/data?"
    uri = URI.parse(fileUri)
    apiDbrc = BRL::Genboree::GenboreeUtil.getSuperuserDbrc(@genbConf, @genbConf.dbrcFile)
    apiCaller = ApiCaller.new(uri.host, uri.path, apiDbrc.user, apiDbrc.password)

    # Do internal request if enabled (in this case, if we've been given a Rack env hash to work from)
    retVal = ""
    apiCaller.initInternalRequest(@rackEnv, @genbConf.machineNameAlias) if(@rackEnv)
    resp = apiCaller.get()
    if(apiCaller.succeeded?)
      retVal = apiCaller.respBody
    else
      $stderr.puts "ERROR: apiCaller to get features failed. resp body:\n#{apiCaller.respBody.inspect}"
    end
    buffIO = StringIO.new(retVal)
    featureLine = buffIO.readline
    featureLine.gsub!("#", "")
    features = featureLine.chomp.split(/\t/)
    featureIndexHash = {}
    features.size.times { |featureIndex|
      featureIndexHash[features[featureIndex]] = featureIndex
    }
    features.uniq!
    # Get kill list
    opsList = []
    killList = @genbConf.microbiomeKillList
    if(!features.nil? and !features.empty?)
      tempList = features - killList
      featureHash = {}
      tempList.each { |feature|
        featureHash[feature] = {}
      }
      # Now pick out only those features that have at least 2 unique records
      buffIO.each_line { |line|
        records = line.chomp.split(/\t/)
        featureHash.each_key { |feature|
          featureHash[feature][records[featureIndexHash[feature]]] = nil
        }
      }
      featureHash.each_key { |feature|
        opsList.push(feature) if(featureHash[feature].keys.size > 1)
      }
      if(opsList.empty?)
        wue = BRL::Genboree::Tools::WorkbenchUIError.new(:'Precondition Failed', "MISSING_VALUES: There MUST be at least 2 unique values for at least one feature to run Alpha Diversity")
        raise wue
      end
    end
    # for width, should only style input tags with attribute type=text, not checkboxes, radio buttons, etc.
    # setting labelWidth and setting width should leave about 50px spare room for formatting according to fiddling
    # labelWidth defaults to 150px and most forms are set to 520px
    renderFrag(@toolIdStr, :wbToolSettingsUI,
    {
      :sectionTitle => "Settings",
      :widgets =>
      [
        { :id => 'studyName', :label => 'Study Name', :type => :text , :style => "width: 320px", :value => "", :title => "The output folder for the Alpha Diversity results" },
        { :id => 'jobName', :label => 'Job Name', :type => :text , :style => "width: 320px", :value => "AD-Job-#{Time.now.strftime('%Y-%m-%d-%H:%M:%S')}", :title => "Give this job a unique name" },
        { :id => "featureList", :label =>'Feature List', :type => :selectWithToggle, :size => '7', :text => 'Select features you wish to include', :selectByDefault => :all, :multiSelect => true,
          :toggleAllButton => true, :title => "Metadata features provided by user. (Example: age, ethnic, etc)", :options => opsList, :width => 200},
        {  :id => 'removeSingletons', :label => 'Remove singletons?', :type => :checkbox, :checked => true, :title => "Remove singletons from OTU table?"},
        {  :id => 'colors', :label => 'colors', :type => :text, :hidden => true, :size => "25", :value => '#8b0000,#000000,#0066FF,#00FF33,#66CDAA,#FF69B4,#FF8C00,#808000,#A9A9A9', :newline => false},
        {  :id => 'renyiScale', :label => 'renyiScale', :type => :text, :hidden => true, :size => "25", :value => '0,0.25,0.5,1,2,4,8,Inf', :newline => false},
        {  :id => 'permutations', :label => 'permutations', :type => :text, :hidden => true, :size => "25", :value => '100', :newline => false},
        {  :id => 'legendBoolChar', :label => 'legendBoolChar', :type => :text, :hidden => true, :size => "25", :value => 'T', :newline => false},
        {  :id => 'legendPosition', :label => 'legendPosition', :type => :text, :hidden => true, :size => "25", :value => 'right', :newline => false},
        {  :id => 'legendMarkerSizeMod', :label => 'legendMarkerSizeMod', :type => :text, :hidden => true, :size => "25", :value => '0', :newline => false},
        {  :id => 'renyiOffset', :label => 'renyiOffset', :type => :text, :hidden => true, :size => "25", :value => '6', :newline => false},
        {  :id => 'richnessOffset', :label => 'richnessOffset', :type => :text, :hidden => true, :size => "25", :value => '-2', :newline => false},
        {  :id => 'richnessOffset2', :label => 'richnessOffset2', :type => :text, :hidden => true, :size => "25", :value => '40', :newline => false},
        {  :id => 'height', :label => 'height', :type => :text, :hidden => true, :size => "25", :value => '8', :newline => false},
        {  :id => 'width', :label => 'width', :type => :text, :hidden => true, :size => "25", :value => '8', :newline => false},
        {  :id => 'rainbow', :label => 'rainbow', :type => :text, :hidden => true, :size => "25", :value => 'F', :newline => false},
        {  :id => 'meta', :label => 'meta', :type => :text, :hidden => true, :size => "25", :value => 'Treatment.Body_Site', :newline => false},
        {  :id => 'pngDensity', :label => 'pngDensity', :type => :text, :hidden => true, :size => "25", :value => '200', :newline => false},

      ]
    })

  %>
  <%= renderStaticFrag(@toolIdStr, :wbToolButtons,
      {
        :buttons => [ { :type => :submit }, { :type => :cancel} ]
      })
  %>
</form>
