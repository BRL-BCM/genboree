<%@ page import="org.genboree.tabular.LffConstants,
                 org.genboree.tabular.AttributeRetriever,
                 org.genboree.util.GenboreeUtils,
                 java.util.HashMap,
                 org.genboree.editor.AnnotationDetail,
                 org.genboree.message.GenboreeMessage,
                 org.genboree.tabular.AnnotationSorter,
                 java.util.ArrayList,
                 java.util.Iterator"%>
<%@ page import="java.util.Date" %>
<%@ page import="org.genboree.tabular.AnnotationRetriever" %>
<%  // test value only 	        
	if (numShareAnnos > 0) {
		String [] myshareFids = AnnotationRetriever.retrieveFidByChromosomeFtypeids(sharedConnection, shareftypeids, rid, chrStart, chrStop);
		if (myshareFids != null && myshareFids.length > 0) {
			sharedAnnotations = new AnnotationDetail[myshareFids.length];
			for (i = 0; i < myshareFids.length; i++) {
				sharedAnnotations[i] = new AnnotationDetail(Integer.parseInt(myshareFids[i]));
				sharedAnnotations[i].setShare(true);
			}
		}
		
	}

	if (numLocalAnnos > 0 && (orderedSortNames == null || orderedSortNames.length == 0)) {
		String [] myfidlocal = AnnotationRetriever.retrieveFidByChromosomeFtypeids(con, localftypeids,  rid, chrStart, chrStop);
		localAnnotations = new AnnotationDetail[myfidlocal.length];
		for (i = 0; i < myfidlocal.length; i++)
			localAnnotations[i] = new AnnotationDetail(Integer.parseInt(myfidlocal[i]));
		
	}
	
	
	
	
	ArrayList fidList = new ArrayList();
	// case 1.1. has  sorting 
	if (orderedSortNames != null) {
		if (localftypeids != null && localftypeids.length > 0) {
			localAnnotations = AnnotationRetriever.retrieveSortAnnotationsByChromosomeFtypeids(con, localftypeids, rid, chrStart, chrStop, sortList, fdataSortNames, localftypeid2ftype, localftypeid2Gclass, localid2Chromosome);
			//  localAnnotations = retrieveSortAnnotations(con, localftypeids, sortList, fdataSortNames, localftypeid2ftype,localftypeid2Gclass, localid2Chromosome );                                                       
			if (localAnnotations != null && localAnnotations.length > 0) {

				int localfidsInt[] = new int[localAnnotations.length];
				localfids = new String[localAnnotations.length];
				for (i = 0; i < localAnnotations.length; i++) {
					localfid2anno.put("" + localAnnotations[i].getFid(), localAnnotations[i]);
					localfids[i] = "" + localAnnotations[i].getFid();
					localfidsInt[i] = localAnnotations[i].getFid();
					fidList.add(localfids[i]);
				}
				// if sorting by text
				if (sortList.contains(LffConstants.LFF_COLUMNS[12]) || sortList.contains(LffConstants.LFF_COLUMNS[13])) {
					AttributeRetriever.populateAnnotationText(localAnnotations, localfid2anno, con);
					needSort = true;
				}
				// retrieves  avp data
				avpNames = (String[]) avpSortNameList.toArray(new String[avpSortNameList.size()]);
				if (avpNames != null && avpNames.length > 0) {
					needSort = true;

					localfid2hash = AttributeRetriever.retrieveSmallNumAnnotationAVPs(con, localfidsInt);
					if (localfid2hash != null && localAnnotations != null) {
						for (int m = 0; m < localAnnotations.length; m++) {
							if (localAnnotations[m] != null && localfid2hash.get("" + localAnnotations[m].getFid()) != null) {
								avp = (HashMap) localfid2hash.get("" + localAnnotations[m].getFid());

								localAnnotations[m].setAvp(avp);
							}
						}
			     
					}
				}
			}
					
		}


		if (shareftypeids != null && shareftypeids.length > 0) {
			sharedAnnotations =AnnotationRetriever.retrieveSortAnnotationsByChromosomeFtypeids(sharedConnection, shareftypeids, rid, chrStart, chrStop, sortList, fdataSortNames, shareftypeid2ftype, shareftypeid2Gclass, shareid2Chromosome);
			if   (sharedAnnotations != null) {
				sharefids = new String[sharedAnnotations.length];

				int[] sharefidsInt = new int[sharedAnnotations.length];
				for (i = 0; i < sharedAnnotations.length; i++) {
					sharefid2anno.put("" + sharedAnnotations[i].getFid(), sharedAnnotations[i]);
					sharefidsInt[i] = sharedAnnotations[i].getFid();
					sharefids[i] = "" + sharedAnnotations[i].getFid();
					fidList.add(sharefids[i]);
					sharedAnnotations[i].setShare(true);
				}
				// if sorting by text
				if (sortList.contains(LffConstants.LFF_COLUMNS[12]) || sortList.contains(LffConstants.LFF_COLUMNS[13])) {
					AttributeRetriever.populateAnnotationText(sharedAnnotations, sharefid2anno, con);
					needSort = true;
				}
				// retrieves  avp data
				if (avpNames != null && avpNames.length > 0) {
					needSort = true;
					sharefid2hash = AttributeRetriever.retrieveSmallNumAnnotationAVPs(sharedConnection, sharefidsInt);
					if (sharefid2hash != null && sharedAnnotations != null) {
						for (int m = 0; m < sharedAnnotations.length; m++) {
							if (sharefid2hash.get("" + sharedAnnotations[m].getFid()) != null && sharedAnnotations[m] != null) {
								avp = (HashMap) sharefid2hash.get("" + sharedAnnotations[m].getFid());
								sharedAnnotations[m].setAvp(avp);
							}

						}
					}
				}
			}
				
		}
	}

	      totalNumAnnotations = 0; 
	if (localAnnotations != null) totalNumAnnotations = localAnnotations.length; 
	    if (sharedAnnotations != null   )
		totalNumAnnotations += sharedAnnotations.length; 
		
		totalAnnotations = new AnnotationDetail [totalNumAnnotations]; 
		
			if (localAnnotations != null ) {
		for (i = 0; i < localAnnotations.length; i++) 
			totalAnnotations[i] = localAnnotations[i];
	}
	if (sharedAnnotations != null) {
		for (i = 0; i < sharedAnnotations.length ; i++)
			totalAnnotations[i + numLocalAnnos] = sharedAnnotations[i];
	}


	if (totalAnnotations == null) {
		GenboreeMessage.setErrMsg(mys, " No annotations are found with the track information provided.");
		hasData = false;
	}
	else {  // has data    
		 totalNumAnnotations =  totalAnnotations.length; 
		if (needSort) {
			if (avpNames != null && avpNames.length > 0) {
				HashMap myavp = null;
				String mykey = null;
				String myvalue = null;
				for (int j = 0; j < totalAnnotations.length; j++) {
					myavp = totalAnnotations[j].getAvp();
					if (myavp == null) {
						continue;
					}

					Iterator it = myavp.keySet().iterator();
					ArrayList list = null;
					while (it.hasNext()) {
						mykey = (String) it.next();
						myvalue = (String) myavp.get(mykey);
						list = new ArrayList();
						list.add(myvalue);
						myavp.put(mykey, list);
					}
				}
			}
			totalAnnotations = AnnotationSorter.sortAllAnnotations(orderedSortNames, totalAnnotations);
		}
		mys.setAttribute("totalAnnotations_AV", totalAnnotations);
	  
	}
%>
