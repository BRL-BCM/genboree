<%@ page import="org.genboree.dbaccess.GenboreeGroup,
                 java.util.*,
                 java.io.*,
                 org.genboree.message.GenboreeMessage,
                 org.genboree.editor.AnnotationDetail,
                 org.genboree.manager.tracks.Utility,
                 org.json.JSONObject,
                 org.json.JSONArray,
                 org.json.JSONException,
                 org.genboree.tabular.*,
                 org.genboree.tabular.AttributeRetriever,
                 org.genboree.tabular.LffConstants,
                 org.genboree.tabular.LffUtility,
                 org.genboree.tabular.ViewRetrieveException" %>
<%@ page import="org.genboree.editor.Chromosome" %>
<%@ include file="fwdurl.incl" %>
<%@ include file="group.incl" %>
<%@ include file="sessionGrp.incl" %>

<%

  if( userInfo == null || userInfo[ 0 ] == null )
  {
    mys.setAttribute( "accessDenied", "true" );
    GenboreeUtils.sendRedirectSaveTarget( mys, request, response, "/java-bin/login.jsp" );
    return;
  }

  boolean hasTooManyAttNames = false;
  HashMap dbAttributeNameMap = new HashMap();
  String grpStatus = " CHECKED";
  String terseStatus = " CHECKED";
  String verboseStatus = "";
  String radioDisabled = "";
  String dfdisplay = "block";
  String msgTooMany = null;
  int annoLimit = 300000;
  int avpLimit = 1000000;
  int rid = 0;
  boolean createView = false;
  long chrlStart = 0;
  long chrlStop = 0;
  int numChromosomes = 0;
  String[] chrNames = new String[1];
  HashMap chromosomeMap = null;
  String[] keys = null;
  boolean showAllChromosome = false;
  String trkStatus = "0";
  String btndisplay = "none";
  String divdisplay = "none";
  String defButton = "Show Layout Interface";
  String crButton = "Show Simple Interface";
  String btnName = defButton;
  Chromosome chrom = null;

  if( request.getParameter( "trackChanged" ) != null ) trkStatus = request.getParameter( "trackChanged" );
  String crv = request.getParameter( "crv" );
  if( crv != null && crv.equals( "1" ) ) createView = true;

  String radioChecked = request.getParameter( "radioCrView" );
  if( radioChecked == null || radioChecked.length() == 0 ) radioChecked = "";

  String selectedChromosome = request.getParameter( "chrSelNames" );

  String jsparams = request.getParameter( "jsparams" );
  long chrLength = 0;
  String refName = "";
  String chrStart = request.getParameter( "chrStarts" );
  String chrStop = request.getParameter( "chrStops" );

  if( request.getParameter( "selectionfm" ) == null && request.getParameter( "viewfm" ) != null )
  {
    chrStart = request.getParameter( "chrStart" );
    chrStop = request.getParameter( "chrStop" );
    selectedChromosome = request.getParameter( "chrName" );
    radioChecked = " checked ";
    createView = true;
  }

  if( request.getParameter( "viewfm" ) != null )
  {
    chrStart = request.getParameter( "chrStart" );
    chrStop = request.getParameter( "chrStop" );
    selectedChromosome = request.getParameter( "chrName" );
    createView = true;
  }


  String layoutStatus = "0";
  if( request.getParameter( "layoutChanged" ) != null )
    layoutStatus = request.getParameter( "layoutChanged" );
  int numSelectedText = 0;
  HashMap newDisplayOrder = new HashMap();
  HashMap newSortOrder = new HashMap();
  boolean fromLayout = false;
  response.addHeader( "Cache-Control", "no-cache, no-store" );
  boolean viewGroup = true;
  String grpChecked = request.getParameter( "groupView" );
  String grpMode = request.getParameter( "groupMode" );
  int numSelectedAssociation = 0;
  if( grpChecked == null )
  {
    viewGroup = false;
  }
  boolean displayTracks = false;
  boolean hasError = false;
  boolean fromBrowser = false;
  boolean fromView = false;
  if( request.getParameter( "fromBrowser" ) != null )
  {
    String v = request.getParameter( "fromBrowser" );
    if( v.compareToIgnoreCase( "View" ) == 0 )
      fromView = true;
  }
  boolean hasSession = false;
  boolean hasSharedData = false;
  String sharedbName = null;
  HashMap localftype2ftypeIds = null;
  HashMap shareftype2ftypeIds = null;
  AnnotationDetail[] sharedAnnotations = null;
  String[] sharedTracks = null;
  Connection shareConnection = null;
  String[] dbNames = null;
  int mode = -1;
  int totalNumAnnotations = 0;
  String browserTrackName = null;
  String trackNames = null;
  String dbName = null;
  Connection con = null;
  String totalCount = "0";
  String actionJsp = "displaySelection.jsp";
  String[] orderedDisplayNames = null;
  String[] alltracks = null;
  String[] localtracks = null;
  String[] sharetracks = null;
  HashMap trackNameMap = new HashMap();
  int localftypeid = 0;
  int shareftypeid = 0;
  String selectedView = request.getParameter( "viewNames" );

  int localNumAnnotations = 0;
  int shareNumAnnotations = 0;
  boolean fromURLLink = false;
  if( request.getParameter( "fromUrl" ) != null )
  {
    fromURLLink = true;
    if( SessionManager.getSessionGroupId( mys ) != null )
      groupId = SessionManager.getSessionGroupId( mys );
    if( SessionManager.getSessionDatabaseId( mys ) != null )
      rseq_id = SessionManager.getSessionDatabaseId( mys );
  }

  if( !fromURLLink && !fromView )
    GenboreeMessage.clearMessage( mys );


  if( selectedView == null )
  {
    if( mys.getAttribute( "sessionLayout" ) != null )
      selectedView = ( String )mys.getAttribute( "sessionLayout" );
    else
      selectedView = LayoutHelper.DEFAULT_GROUPED_ANNOS;
  } else
  {
    mys.setAttribute( "sessionLayout", selectedView );
  }

  JSONObject json = null;
  String viewStatus = request.getParameter( "viewStatus" );
  boolean debug = true;

  if( viewStatus != null && userInfo[ 0 ].compareToIgnoreCase( "Public" ) != 0 )
  {
    if( viewStatus.equals( "1" ) )
    {
      selectedView = request.getParameter( "viewInput" );
      if( selectedView != null )
      {
        selectedView = Util.urlDecode( selectedView );
        if( jsparams != null && jsparams.length() > 0 )
        {
          json = new JSONObject( jsparams );
          if( json != null )
          {
            String rootPath = org.genboree.upload.LffConstants.ROOTDIR_ANNOTATION_TABLE_VIEW + "/annoTableViews";
            LayoutHelper.saveUserConfig( out, selectedChromosome, chrStart, chrStop, userInfo[ 0 ], grpMode, rootPath, groupId, rseq_id, selectedView, json );
            mys.setAttribute( "sessionLayout", selectedView );
          }
        }
      } else
      {
        GenboreeMessage.setErrMsg( mys, "Please enter layout name. " );
      }
    }
  }


  if( chrStart != null )
    mys.setAttribute( "chromosomeStart", chrStart );

  if( chrStop != null )
    mys.setAttribute( "chromosomeStop", chrStop );
  boolean chromosomeChanged = false;

  if( request.getParameter( "chrChanged" ) != null && request.getParameter( "chrChanged" ).equals( "1" ) )
    chromosomeChanged = true;
  if( chromosomeChanged )
  {
    mys.removeAttribute( "displayChromosome" );
  }

//	if (chromosomeChanged)
//	   createView = true;
  if( selectedChromosome != null )
  {
    mys.setAttribute( "selectedChromosome", selectedChromosome );
    if( selectedChromosome.indexOf( "All Chromosome" ) < 0 )
      mys.setAttribute( "restrictRegion", "false" );
  }

  if( !fromBrowser && request.getParameter( "chrSelNames" ) == null && request.getParameter( "viewfm" ) == null && selectedView == null )
  {
    showAllChromosome = true;
    selectedChromosome = LayoutHelper.ALL_CHROMOSOMES;
    mys.setAttribute( "restrictRegion", "false" );
  }

  boolean trackChanged = false;
  if( trkStatus != null && trkStatus.equals( "1" ) )
    trackChanged = true;
  boolean layoutChanged = false;
  if( layoutStatus != null && layoutStatus.equals( "1" ) )
    layoutChanged = true;


  String viewPath = org.genboree.upload.LffConstants.ROOTDIR_ANNOTATION_TABLE_VIEW
          + "/annoTableViews" + "/" + groupId + "/" + rseq_id;


  String viewNames[] = null;
  try
  {
    if( rseq_id != null && rseq_id.length() > 0 )
      viewNames = LayoutHelper.retrieveExistingConfigs( viewPath );
  }
  catch( Exception e )
  {
    //out.println("Error happened in line 241 " + viewPath );
    viewNames = null;
  }


  if( viewNames == null )
    viewNames = new String[]{ "-- &nbsp;Create New Layout &nbsp; -- ", LayoutHelper.DEFAULT_GROUPED_ANNOS, LayoutHelper.DEFAULT_ALL_ANNOS };
  else
  {
    String[] tempArr = new String[viewNames.length + 3];
    for( int i = 0; i < viewNames.length; i++ )
      tempArr[ i + 3 ] = viewNames[ i ];
    tempArr[ 0 ] = "-- &nbsp;Create New Layout&nbsp; -- ";
    tempArr[ 1 ] = LayoutHelper.DEFAULT_GROUPED_ANNOS;
    tempArr[ 2 ] = LayoutHelper.DEFAULT_ALL_ANNOS;
    viewNames = tempArr;
  }

  int i = 0;
  int[] localftypeids = null;
  int[] shareftypeids = null;
  ArrayList localTrackList = new ArrayList();
  ArrayList shareTrackList = new ArrayList();
  HashMap selectedTrackHash = new HashMap();
  if( request.getParameter( "bk2browser" ) != null )
  {
    mys.removeAttribute( "localftypeids" );
    mys.removeAttribute( "shareftypeids" );
    String bk2 = "java-bin/defaultGbrowser.jsp";
    if( mys.getAttribute( "lastBrowserView" ) != null )
      bk2 = ( String )mys.getAttribute( "lastBrowserView" );
    GenboreeUtils.sendRedirect( request, response, bk2 );
  }

  if( sessionCleared )
  {
    mys.removeAttribute( "localftypeids" );
    mys.removeAttribute( "shareftypeids" );
    mys.removeAttribute( "displayChromosome" );
  }

  String[] orderedSortNames = null;
  String[] selectedTrackNames = null;
  if( rseqs != null && rseqs.length > 0 )
  {
    selectedTrackNames = request.getParameterValues( "dbTrackNames" );
    if( selectedTrackNames != null )
    {
      hasSession = true;
      for( i = 0; i < selectedTrackNames.length; i++ )
      {


        selectedTrackHash.put( selectedTrackNames[ i ], "y" );
        mys.setAttribute( "selectedTrackHash", selectedTrackHash );
      }
    } else
    {     ///   selected track namees in null
      if( !fromBrowser )
        displayTracks = true;

      if( request.getParameter( "viewfm" ) != null || request.getParameter( "fromBrowser" ) != null )
      {
        if( request.getParameter( "fromBrowser" ) != null && mys.getAttribute( "createView" ) != null )
          if( ( ( String )mys.getAttribute( "createView" ) ).equals( "true" ) )
            createView = true;

        //if ( request.getParameter("fromBrowser") != null ) {
        if( mys.getAttribute( "selectedTrackHash" ) != null )
        {
          selectedTrackHash = ( HashMap )mys.getAttribute( "selectedTrackHash" );
          if( selectedTrackHash != null )
          {
            displayTracks = false;
            selectedTrackNames = ( String[] )selectedTrackHash.keySet().toArray( new String[selectedTrackHash.size()] );
          }
        } else
        {
          GenboreeMessage.setErrMsg( mys, "Please select some tracks." );
        }
      } else if( fromURLLink )
      {
        URLParams params = null;
        if( mys.getAttribute( "urlParams" ) != null )
          params = ( URLParams )mys.getAttribute( "urlParams" );

        if( params != null )
        {
          if( params.getTrackNameArr() != null )
          {
            selectedTrackNames = params.getTrackNameArr();
            if( selectedTrackNames != null )
            {
              displayTracks = false;
              for( i = 0; i < selectedTrackNames.length; i++ )
              {
                selectedTrackHash.put( selectedTrackNames[ i ], "y" );
                mys.setAttribute( "selectedTrackHash", selectedTrackHash );
              }
            }
          }
        }
      } else
      {
        if( !sessionCleared && ( request.getParameter( "btnCancel" ) == null ) && ( request.getParameter( "trackName" ) == null ) && ( request.getParameter( "fromBrowser" ) == null ) )
          if( rseq_id != null )
          {
            GenboreeMessage.setErrMsg( mys, "Please select some tracks." );
          }
      }
    }
  }


  String trackNameString = request.getParameter( "trackName" );
  if( trackNameString != null )
  {
    hasSession = false;
    // This should not be necessary...doing request.getParameter -automatically- URL escapes
    // Only time this is needed is when we are double encoding...which sometimes we do
    // to hand args on the command line safely (if value is encoded, it gets double encoded during
    // this procedure.)
    // trackNameString = URLDecoder.decode( trackNameString, "UTF-8" );
    trackNameString = trackNameString.trim();
    fromBrowser = true;
    displayTracks = false;
    SessionManager.clearSessionDatabase( mys );
    SessionManager.clearSessionGroup( mys );
    groupId = ( String )mys.getAttribute( "browserGroupID" );
    SessionManager.setSessionGroupId( mys, groupId );
    rseq_id = ( String )mys.getAttribute( "browserRefseqId" );
    SessionManager.setSessionDatabaseId( mys, rseq_id );
    browserTrackName = trackNameString;
    selectedTrackNames = new String[]{ trackNameString };
    mys.setAttribute( "browserTrackName", trackNameString );
    selectedTrackHash.put( trackNameString, "y" );
    mys.setAttribute( "selectedTrackHash", selectedTrackHash );
    mode = LffConstants.VIEW;
  }

  if( request.getParameter( "btnCancel" ) != null )
  {
    displayTracks = true;
    mys.removeAttribute( "lastMode" );
    mys.removeAttribute( "localftypeids" );
    mys.removeAttribute( "shareftypeids" );

    // browserTrackName =  null;
    if( mys.getAttribute( "browserTrackName" ) != null )
    {
      browserTrackName = ( String )mys.getAttribute( "browserTrackName" );
      selectedTrackHash.put( browserTrackName, "y" );
      mys.setAttribute( "selectedTrackHash", selectedTrackHash );
    }
  }

  // return fromtabular view
  if( request.getParameter( "fromBrowser" ) != null )
  {
    String srcPage = request.getParameter( "fromBrowser" );
    if( srcPage.equals( "View" ) )
    {
      mode = LffConstants.VIEW;
    } else if( srcPage.equals( "Download" ) )
    {
      mode = LffConstants.DOWNLOAD;
    }
    fromBrowser = false;

    if( mys.getAttribute( "selectedTrackHash" ) != null )
    {
      selectedTrackHash = ( HashMap )mys.getAttribute( "selectedTrackHash" );
      if( selectedTrackHash != null )
      {
        selectedTrackNames = ( String[] )selectedTrackHash.keySet().toArray( new String[selectedTrackHash.size()] );
      }
    } else
    {
      browserTrackName = ( String )mys.getAttribute( "browserTrackName" );
      selectedTrackHash.put( browserTrackName, "y" );
      selectedTrackNames = new String[]{ browserTrackName };
      displayTracks = false;
      mys.setAttribute( "selectedTrackHash", selectedTrackHash );
    }
  }


  Refseq rseq = null;
  String[] sortDisplaynames = new String[]{ LffConstants.LFF_COLUMNS[ 2 ], LffConstants.LFF_COLUMNS[ 3 ], LffConstants.LFF_COLUMNS[ 4 ], LffConstants.LFF_COLUMNS[ 5 ], LffConstants.LFF_COLUMNS[ 6 ], LffConstants.LFF_COLUMNS[ 0 ], LffConstants.LFF_COLUMNS[ 1 ] };
  String[] attributeNames = null;
  String[] sortAttributeNames = null;
  // determine the mode
  String currentMode = request.getParameter( "mode" );
  if( currentMode != null )
  {
    for( i = 0; i < LffConstants.modeIds.length; i++ )
    {
      if( currentMode.equals( LffConstants.modeIds[ i ] ) )
      {
        mode = i;
        break;
      }
    }

    if( mys.getAttribute( "defaultlocalftypeids" ) != null )
    {
      localftypeids = ( int[] )mys.getAttribute( "defaultlocalftypeids" );
      mys.setAttribute( "localftypeids", localftypeids );
    }

    if( mys.getAttribute( "defaultshareftypeids" ) != null )
    {
      shareftypeids = ( int[] )mys.getAttribute( "defaultshareftypeids" );
      mys.setAttribute( "shareftypeids", localftypeids );
    }
  }

  String bkPressed = request.getParameter( "back2View" );
  if( bkPressed != null && bkPressed.equals( "1" ) )
    mode = LffConstants.VIEW;

  String downloadData = request.getParameter( "downloadData" );
  if( downloadData != null && downloadData.equals( "1" ) )
    mode = LffConstants.DOWNLOAD;

  String viewData = request.getParameter( "viewData" );
  if( viewData != null && viewData.equals( "1" ) )
    mode = LffConstants.VIEW;

  if( ( mys.getAttribute( "localftypeids" ) != null || mys.getAttribute( "shareftypeids" ) != null ) && !fromBrowser )
    hasSession = true;

  if( rseqs == null || rseqs.length == 0 && mode >= 0 )
    GenboreeMessage.setErrMsg( mys, "Sorry, there is no database in this group. <br> -- Please create a database and try again." );
  if( rseqs != null && rseqs.length > 0 )
  {
    orderedDisplayNames = null;
    rseq = rseqs[ 0 ];
    if( rseq_id != null && !rseq_id.equals( "" ) )
    {
      for( i = 0; i < rseqs.length; i++ )
      {
        if( rseqs[ i ].getRefSeqId().equals( rseq_id ) )
          rseq = rseqs[ i ];
      }
    } else
      rseq = null;

    if( sessionCleared )
    {
      if( grpChangeState != null && grpChangeState.compareTo( "1" ) == 0 )
      {
        rseq = null;
      }
      mys.removeAttribute( "attributeNames" );
      mys.removeAttribute( "totalCount" );
      mys.removeAttribute( "localftypeids" );
      mys.removeAttribute( "shareftypeids" );
      hasSession = false;
      selectedTrackNames = null;
      selectedTrackHash.clear();
      mys.removeAttribute( "selectedTrackHash" );
      displayTracks = true;
      GenboreeMessage.clearMessage( mys );
    }

    //if ( sessionCleared) {
    String cmode = request.getParameter( "currentMode" );
    int genboreeUserId = Util.parseInt( myself.getUserId(), -1 );
    if( cmode != null )
      mode = Integer.parseInt( cmode );
    // }
    if( rseq != null )
    {
      dbName = rseq.getDatabaseName();
      dbNames = rseq.fetchDatabaseNames( db );
      mys.setAttribute( "dbNames", dbNames );

      for( i = 0; i < dbNames.length; i++ )
      {
        if( !dbNames[ i ].equals( dbName ) )
          sharedbName = dbNames[ i ];
      }

      con = db.getConnection( dbName );
      if( sharedbName != null )
        shareConnection = db.getConnection( sharedbName );

      // the following code handles input of trackNames from gbrowser
      if( trackNameString != null )
      {
        if( trackNameString.length() > 0 && con != null )
          localftypeid = LffUtility.parseTrackName4ftypeid( trackNameString, con );
        // local data
        if( localftypeid > 0 )
        {
          localftypeids = new int[]{ localftypeid };
          mys.setAttribute( "localftypeids", localftypeids );
          mys.setAttribute( "defaultlocalftypeids", localftypeids );
        }
        // the follow code check shared db for this track
        //note: track name can exist in both local and shared database
        if( shareConnection != null )
          shareftypeid = LffUtility.parseTrackName4ftypeid( trackNameString, shareConnection );
        if( shareftypeid > 0 )
        {
          hasSharedData = true;
          shareftypeids = new int[]{ shareftypeid };
          mys.setAttribute( "shareftypeids", shareftypeids );
          mys.setAttribute( "defaultshareftypeids", shareftypeids );
        }
      }

      //if (!hasSession) // commnets: because user could create new tracks via editor, so we should all ways get new tracks
      {
        if( con != null )
          localtracks = Utility.retrieveTrackNames( con, dbName, genboreeUserId );
        if( shareConnection != null )
          sharetracks = Utility.retrieveTrackNames( shareConnection, sharedbName, genboreeUserId );
        if( localtracks != null )
          for( i = 0; i < localtracks.length; i++ )
            trackNameMap.put( localtracks[ i ], "y" );
        if( sharetracks != null )
          for( i = 0; i < sharetracks.length; i++ )
            trackNameMap.put( sharetracks[ i ], "y" );

        if( !trackNameMap.isEmpty() )
          alltracks = ( String[] )trackNameMap.keySet().toArray( new String[trackNameMap.size()] );

        if( alltracks != null )
          Arrays.sort( alltracks );
        else
          GenboreeMessage.setErrMsg( mys, "There is no annotation to display." );

        mys.setAttribute( "alltracks", alltracks );
      }


      HashMap shareTrack2Ftypes = null;
      if( shareConnection != null )
        shareTrack2Ftypes = Utility.retrivesTrack2Ftype( shareConnection, sharedbName, genboreeUserId );
      if( shareTrack2Ftypes != null && !shareTrack2Ftypes.isEmpty() )
      {
        shareTrack2Ftypes.remove( "Component:Chromosome" );
        shareTrack2Ftypes.remove( "SuperComponent:Sequence" );
        sharedTracks = ( String[] )( shareTrack2Ftypes.keySet().toArray( new String[shareTrack2Ftypes.size()] ) );
        if( sharedTracks != null )
          mys.setAttribute( "sharetracks", sharetracks );
      }
      // the following code handles user selected tracks
      if( selectedTrackNames != null )
      {
        mode = 1;
        localftype2ftypeIds = Utility.retrieveFtype2ftypeId( con, dbName, genboreeUserId );

        if( shareConnection != null )
          shareftype2ftypeIds = Utility.retrieveFtype2ftypeId( shareConnection, sharedbName, genboreeUserId );

        String id = null;


        for( i = 0; i < selectedTrackNames.length; i++ )
        {
          if( localftype2ftypeIds != null && localftype2ftypeIds.get( selectedTrackNames[ i ] ) != null )
            localTrackList.add( selectedTrackNames[ i ] );
          if( shareftype2ftypeIds != null && shareftype2ftypeIds.get( selectedTrackNames[ i ] ) != null )
            shareTrackList.add( selectedTrackNames[ i ] );
        }

        if( localTrackList != null && !localTrackList.isEmpty() )
        {
          localftypeids = new int[localTrackList.size()];
          for( i = 0; i < localTrackList.size(); i++ )
          {
            String trackName = ( String )localTrackList.get( i );
            id = ( String )localftype2ftypeIds.get( trackName );
            localftypeids[ i ] = Integer.parseInt( id );
          }
        }
        if( !shareTrackList.isEmpty() )
        {
          shareftypeids = new int[shareTrackList.size()];
          for( i = 0; i < shareTrackList.size(); i++ )
          {
            String trackName = ( String )shareTrackList.get( i );
            id = ( String )shareftype2ftypeIds.get( trackName );
            shareftypeids[ i ] = Integer.parseInt( id );
          }
        }
        mys.setAttribute( "localftypeids", localftypeids );
        mys.setAttribute( "shareftypeids", shareftypeids );
      }

      if( localftypeids == null && mys.getAttribute( "localftypeids" ) != null )
        localftypeids = ( int[] )mys.getAttribute( "localftypeids" );

      int localAVPAssociationCount = 0;
      int shareAVPAssociationCount = 0;
      int localTextCount = 0;
      int shareTextCount = 0;
      numChromosomes = GroupHelper.countChromosome( con );
      ///if  (numChromosomes < 1000)
      chromosomeMap = Utility.retrieveChromosomeMap( con );
      if( chromosomeMap != null && !chromosomeMap.isEmpty() )
      {
        keys = ( String[] )chromosomeMap.keySet().toArray( new String[chromosomeMap.size()] );
        Arrays.sort( keys );
      }

      if( keys != null )
      {
        chrNames = new String[keys.length + 1];
        for( i = 0; i < keys.length; i++ )
        {
          chrNames[ i + 1 ] = keys[ i ];
        }
      }


      if( fromView )
      {
        Chromosome m1 = null;
        if( mys.getAttribute( "displayChromosome" ) != null )
          m1 = ( Chromosome )mys.getAttribute( "displayChromosome" );
        if( m1 != null )
        {
          selectedChromosome = m1.getRefname();
          chrlStart = m1.getStart();
          chrStart = "" + m1.getStart();
          chrlStop = m1.getStop();
          chrStop = "" + m1.getStop();
          rid = m1.getId();
          if( rid == 0 && selectedChromosome != null )
          {
            m1 = Chromosome.findChromosome( con, selectedChromosome );
            rid = m1.getId();
          }
        }
      }


      chrNames[ 0 ] = LayoutHelper.ALL_CHROMOSOMES;
      chrom = null;
      if( selectedChromosome == null || selectedChromosome.length() == 0 )
      {
        if( selectedView != null )
        {


          if( selectedView.indexOf( "Create New Layout" ) < 0 )
          {
            String parentPath = org.genboree.upload.LffConstants.ROOTDIR_ANNOTATION_TABLE_VIEW + "/annoTableViews"
                    + "/" + groupId + "/" + rseq_id;


            if( selectedView.equals( LayoutHelper.DEFAULT_GROUPED_ANNOS ) )
            {
              json = new JSONObject( ( LayoutHelper.JSON_DF_GROUP ) );
            } else if( selectedView.equals( LayoutHelper.DEFAULT_ALL_ANNOS ) )
            {
              json = new JSONObject( ( LayoutHelper.JSON_DF_ALL ) );
            } else
            {

              try
              {
                json = LayoutHelper.retrievesJsonObject( parentPath, selectedView );
              }
              catch( ViewRetrieveException e )
              {

                //  out.println(" <br>view error in 657  " );
                System.err.println( "error in 662 of displaySelection.jsp " );

                json = null;
              }
            }

          }
        }
      }


      if( !fromView )
      {
        if( ( selectedChromosome == null || selectedChromosome.length() == 0 ) && keys != null )
        {
          if( request.getParameter( "fromBrowser" ) != null || fromURLLink )
          {
            String restrictChr = null;
            if( mys.getAttribute( "restrictRegion" ) != null )
              restrictChr = ( String )mys.getAttribute( "restrictRegion" );

            if( restrictChr != null && restrictChr.equals( "false" ) )
            {
              selectedChromosome = LayoutHelper.ALL_CHROMOSOMES;
              showAllChromosome = true;
            } else
            {
              // not show all
              chrom = ( Chromosome )mys.getAttribute( "displayChromosome" );

              if( chrom != null )
              {
                boolean hasErr = false;
                rid = chrom.getId();
                selectedChromosome = chrom.getRefname();
                chrlStart = chrom.getStart();

                if( chrlStart >= 1000 )
                {
                  chrStart = Util.putCommas( "" + chrlStart );
                } else
                  chrStart = "" + chrlStart;
                chrlStop = chrom.getStop();

                if( chrlStop >= 1000 )
                {
                  chrStop = Util.putCommas( "" + chrlStop );
                } else
                  chrStop = "" + chrlStop;

                if( rid == 0 || selectedChromosome == null )
                  hasErr = true;

                if( chrlStart == 0 || chrlStop == 0 || chrlStop < chrlStart )
                  hasErr = true;
                if( hasErr )
                {
                  if( selectedChromosome != null && selectedChromosome.indexOf( "All Chromosome" ) >= 0 )
                    showAllChromosome = true;
                  if( !showAllChromosome && chromosomeMap.get( keys[ 0 ] ) != null )
                  {
                    chrom = ( Chromosome )chromosomeMap.get( keys[ 0 ] );

                    if( chrom != null )
                    {
                      chrLength = chrom.getLength();
                      chrStop = Util.putCommas( "" + chrLength );
                    }
                    selectedChromosome = chrom.getRefname();
                    rid = chrom.getId();
                    chrlStart = 1;
                    chrlStop = chrLength;
                    chrStart = "1";
                  }
                }
              } else
              {
                if( chromosomeMap.get( keys[ 0 ] ) != null )
                {
                  chrom = ( Chromosome )chromosomeMap.get( keys[ 0 ] );
                  if( chrom != null )
                  {
                    chrLength = chrom.getLength();
                    chrStop = Util.putCommas( "" + chrLength );
                  }
                  selectedChromosome = chrom.getRefname();
                  rid = chrom.getId();
                  chrlStart = 1;
                  chrlStop = chrLength;
                  chrStart = "1";
                }

              }
            }
            if( selectedChromosome != null && selectedChromosome.indexOf( "All Chromosome" ) >= 0 )
            {
              showAllChromosome = true;
              //mys.setAttribute("restrictRegion", "true" );
            }
          } else
          {    //   set default to all chromosomes
            selectedChromosome = LayoutHelper.ALL_CHROMOSOMES;
          }
        } else
        {  //     has selected chromosome
          // System.err.println("<br> 721: index is   --" + selectedChromosome  + ":" + LayoutHelper.ALL_CHROMOSOMES+ "--  " + selectedChromosome.indexOf("All Chromosome") );
          if( selectedChromosome != null && selectedChromosome.indexOf( "All Chromosome" ) >= 0 )
          {
            showAllChromosome = true;
            selectedChromosome = LayoutHelper.ALL_CHROMOSOMES;
            mys.setAttribute( "restrictRegion", "false" );
            //System.err.println("<br> 724  "  + selectedChromosome  );
          } else
          {
            // System.err.println("<br> 728  "  );
            if( chromosomeMap != null && selectedChromosome != null && chromosomeMap.get( selectedChromosome ) != null )
              chrom = ( Chromosome )chromosomeMap.get( selectedChromosome );
            mys.removeAttribute( "restrictRegion" );

            if( chrom != null )
            {
              rid = chrom.getId();
              chrLength = chrom.getLength();
              if( chrStart == null || chrStart.length() == 0 )
              {
                chrlStart = 1;
                chrStart = "1";
              } else
              {
                if( trackChanged || layoutChanged )
                {

                  String temp = chrStart.replaceAll( ",", "" );
                  temp = temp.trim();
                  temp = temp.replaceAll( " ", "" );
                  try
                  {
                    chrlStart = Long.parseLong( temp );
                  }
                  catch( Exception e )
                  {
                    chrlStart = 1;
                    GenboreeMessage.setErrMsg( mys, "Chromosome start is invalid." );
                  }
                  chrStart = Util.putCommas( temp );
                } else
                {
                  chrStart = "1";
                  chrlStart = 1;

                }
              }

              if( chrStop == null || chrStop.length() == 0 )
              {
                chrStop = Util.putCommas( "" + chrLength );
                chrlStop = chrLength;
              } else
              {
                if( trackChanged || layoutChanged )
                {
                  String temp = chrStop.replaceAll( ",", "" );
                  temp = temp.trim();
                  temp = temp.replaceAll( " ", "" );
                  try
                  {
                    chrlStop = Long.parseLong( temp );
                  }
                  catch( Exception e )
                  {
                    chrlStart = 1;
                    GenboreeMessage.setErrMsg( mys, "Chromosome stop is invalid." );
                  }

                  chrStop = Util.putCommas( temp );
                } else
                {
                  chrStop = Util.putCommas( "" + chrLength );
                  chrlStop = chrLength;
                }
              }

              chrom.setStart( chrlStart );
              chrom.setStop( chrlStop );
              mys.setAttribute( "displayChromosome", chrom );
            }
          }
        }
      }


      if( selectedChromosome == null || ( selectedChromosome != null && selectedChromosome.indexOf( "All Chromosome" ) >= 0 ) )
      {
        showAllChromosome = true;
        selectedChromosome = LayoutHelper.ALL_CHROMOSOMES;

        mys.setAttribute( "restrictRegion", "false" );
      }


      if( selectedView != null && selectedView.indexOf( "Create New" ) > -1 )
        createView = true;


      if( createView )
      {
        divdisplay = "block";
        dfdisplay = "none";
        if( !fromBrowser && displayTracks )
          btndisplay = "block";
        else
          btndisplay = "none";
        btnName = crButton;
      } else
      {
        divdisplay = "none";
        dfdisplay = "block";
        btndisplay = "none";
        btnName = defButton;
      }

      if( ( mode == LffConstants.VIEW || mode == LffConstants.DOWNLOAD ) || fromBrowser )
      {
        HashMap attNameMap = new HashMap();
        if( localftypeids != null )
        {
          if( showAllChromosome )
          {
            localNumAnnotations = Utility.countAnnotations( con, localftypeids );
            if( createView )
              localAVPAssociationCount = AttributeRetriever.countAVPAssociation( con, localftypeids, 1000000, localNumAnnotations, out );
            //localTextCount=  LffUtility.countText (con, localftypeids);
          } else
          {
            localNumAnnotations = Utility.countAnnotations( con, localftypeids, rid, chrlStart, chrlStop );
            if( createView )
              localAVPAssociationCount = AttributeRetriever.countAVPAssociationByChromosomeRegion( con, localftypeids, 1000000, localNumAnnotations, rid, chrlStart, chrlStop, out );
            //localTextCount=  LffUtility.countText (con, localftypeids, rid, chrlStart, chrlStop);
          }

          String[] localdbAttNames = AttributeRetriever.retrievesAttributeNames( con, localftypeids );
          if( localdbAttNames != null && localdbAttNames.length > 0 )
          {
            for( i = 0; i < localdbAttNames.length; i++ )
            {
              if( localdbAttNames[ i ] != null )
                attNameMap.put( localdbAttNames[ i ], "y" );
            }
          }
        }


        if( shareftypeids != null && shareConnection != null )
        {
          String[] sharedbAttNames = AttributeRetriever.retrievesAttributeNames( shareConnection, shareftypeids );
          if( showAllChromosome )
          {
            shareNumAnnotations = Utility.countAnnotations( shareConnection, shareftypeids );
            if( localAVPAssociationCount < 1000000 && createView )
              shareAVPAssociationCount = AttributeRetriever.countAVPAssociation( shareConnection, shareftypeids, 1000000, shareNumAnnotations, out );
            //  shareTextCount=  LffUtility.countText (shareConnection, shareftypeids);
          } else
          {
            shareNumAnnotations = Utility.countAnnotations( shareConnection, shareftypeids, rid, chrlStart, chrlStop );
            if( localAVPAssociationCount < 1000000 && createView )
              shareAVPAssociationCount = AttributeRetriever.countAVPAssociationByChromosomeRegion( shareConnection, shareftypeids, 1000000, shareNumAnnotations, rid, chrlStart, chrlStop, out );
            //shareTextCount=  LffUtility.countText (shareConnection, shareftypeids, rid, chrlStart, chrlStop);
          }

          if( sharedbAttNames != null && sharedbAttNames.length > 0 )
          {
            for( i = 0; i < sharedbAttNames.length; i++ )
            {
              if( sharedbAttNames[ i ] != null )
                attNameMap.put( sharedbAttNames[ i ], "y" );
            }
          }
        }


        numSelectedAssociation = localAVPAssociationCount + shareAVPAssociationCount;
        numSelectedText = localTextCount + shareTextCount;
        String[] dbAttNames = ( String[] )attNameMap.keySet().toArray( new String[attNameMap.size()] );

        if( dbAttNames != null )
        {
          Arrays.sort( dbAttNames );
          if( dbAttNames.length > 50 )
          {
            msgTooMany = "Too many (" + dbAttNames.length + ") custom attributes to display here.  Displayed only the first 50.";
            hasTooManyAttNames = true;
            String[] temparr = new String[50];
            for( i = 0; i < 50; i++ )
              temparr[ i ] = dbAttNames[ i ];
          }

          for( i = 0; i < dbAttNames.length; i++ )
            dbAttributeNameMap.put( dbAttNames[ i ], "y" );
          dbAttributeNameMap.put( "\"Edit\" Link", "y" );
          attributeNames = new String[LffConstants.LFF_COLUMNS.length + dbAttNames.length + 1];
          sortAttributeNames = new String[LffConstants.LFF_COLUMNS.length + dbAttNames.length];
          attributeNames[ 0 ] = "\"Edit\" Link";
          for( i = 0; i < LffConstants.LFF_COLUMNS.length; i++ )
          {
            dbAttributeNameMap.put( LffConstants.LFF_COLUMNS[ i ], "y" );
            attributeNames[ i + 1 ] = LffConstants.LFF_COLUMNS[ i ];
            sortAttributeNames[ i ] = LffConstants.LFF_COLUMNS[ i ];
          }

          for( i = 0; i < dbAttNames.length; i++ )
          {
            attributeNames[ i + LffConstants.LFF_COLUMNS.length + 1 ] = dbAttNames[ i ];
            sortAttributeNames[ i + LffConstants.LFF_COLUMNS.length ] = dbAttNames[ i ];
          }
        } else
        {
          attributeNames = new String[LffConstants.LFF_COLUMNS.length + 1];
          attributeNames[ 0 ] = "\"Edit\" Link";
          sortAttributeNames = new String[LffConstants.LFF_COLUMNS.length];
          for( i = 0; i < LffConstants.LFF_COLUMNS.length; i++ )
          {
            attributeNames[ i + 1 ] = LffConstants.LFF_COLUMNS[ i ];
            sortAttributeNames[ i ] = LffConstants.LFF_COLUMNS[ i ];
          }
        }
        mys.setAttribute( "attributeNames", attributeNames );

        totalNumAnnotations = localNumAnnotations + shareNumAnnotations;
        totalCount = "" + totalNumAnnotations;
        if( totalNumAnnotations > 1000 )
          totalCount = Util.putCommas( "" + totalNumAnnotations );
        mys.setAttribute( "totalCount", totalCount );

        String track = "track ";
        String tracks = track;
        if( selectedTrackNames != null )
        {
          if( selectedTrackNames.length > 1 || selectedTrackNames.length == 0 )
            track = "tracks ";


          tracks = track;
          if( selectedTrackNames != null && selectedTrackNames.length == 1 )
            tracks = tracks + ":\"" + selectedTrackNames[ 0 ] + "\"";

          if( selectedTrackNames != null && selectedTrackNames.length > 1 )
          {
            for( i = 0; i < selectedTrackNames.length; i++ )
              tracks = tracks + "\"" + selectedTrackNames[ i ] + "\",";
            tracks = tracks.substring( 0, tracks.length() - 1 );
          }
        } else
        {
          tracks = "";
        }


        if( totalNumAnnotations <= 0 && selectedTrackNames != null )
        {
          String chrRegion2 = " and chromosomal region ";
          String chrRegion = "";
          if( selectedChromosome != null )
            chrRegion = selectedChromosome;
          String info2 = ", chromosome, or chromosomal region";
          if( chrStart != null )
            chrRegion = chrRegion + ":" + chrStart;

          if( chrStop != null && chrStart != null )
            chrRegion = chrRegion + "-" + chrStop;

          if( selectedChromosome != null && selectedChromosome.indexOf( LayoutHelper.ALL_CHROMOSOMES ) >= 0 )
          {
            chrRegion2 = "";
            info2 = "";
            chrRegion = "";
          }

          if( selectedChromosome == null )
          {
            chrRegion2 = "";
            info2 = "";
          }
          ArrayList errlist = new ArrayList();
          errlist.add( "There is no annotation in the above selected " + track + chrRegion2 + "." );
          errlist.add( "Please try different tracks" + info2 + "." );
          GenboreeMessage.setErrMsg( mys, "You have selected " + tracks + chrRegion2 + chrRegion + ".", errlist );
        }

        if( totalNumAnnotations > annoLimit || numSelectedAssociation > avpLimit )
        {
          grpStatus = "";
          radioDisabled = " disabled ";
          terseStatus = "";
          verboseStatus = "";
        }

        orderedDisplayNames = attributeNames;
        if( !hasSession && alltracks == null && selectedTrackNames != null )
          GenboreeMessage.setErrMsg( mys, "There is no annotation in the selected database " );
      }

      if( selectedTrackNames == null || selectedTrackNames.length == 0 )
      {
        if( !fromURLLink && rseq_id != null && alltracks != null && alltracks.length > 0 )
          GenboreeMessage.setErrMsg( mys, "Please select some tracks." );
      }


    }  // end of rseq != null

    if( mode == LffConstants.DOWNLOAD && rseq != null )
    {
      actionJsp = "downloadGroupAnnotations.jsp";

      if( !viewGroup )
        actionJsp = "downloadAnnotations.jsp";
    } else if( mode == LffConstants.VIEW && rseq != null )
    {
      actionJsp = "viewGroupAnnotations.jsp";
      if( !viewGroup )
        actionJsp = "viewAnnotation.jsp";
    }
  }

  String scrollableClass = "scrollable260";
  if( attributeNames != null && attributeNames.length < 15 )
    scrollableClass = "scrollable200";
  boolean fromSavedView = false;
  HashMap savedDisplayNames = new HashMap();
  HashMap savedSortNames = new HashMap();

  String[] viewAttributeNames = null;
  String[] viewSortAttributeNames = null;

  HashMap name2json = new HashMap();
  if( selectedView != null )
  {
    if( selectedView.indexOf( "Create New Layout" ) < 0 )
    {
      String parentPath = org.genboree.upload.LffConstants.ROOTDIR_ANNOTATION_TABLE_VIEW + "/annoTableViews"
              + "/" + groupId + "/" + rseq_id;


      if( selectedView.equals( LayoutHelper.DEFAULT_GROUPED_ANNOS ) )
        json = new JSONObject( ( LayoutHelper.JSON_DF_GROUP ) );

      else if( selectedView.equals( LayoutHelper.DEFAULT_ALL_ANNOS ) )
        json = new JSONObject( ( LayoutHelper.JSON_DF_ALL ) );

      else
      {
        try
        {
          if( selectedView.indexOf( "Default All " ) < 0 && selectedView.indexOf( "Default Group" ) < 0 )
            json = LayoutHelper.retrievesJsonObject( parentPath, selectedView );
        }
        catch( ViewRetrieveException e )
        {
          System.err.println( "<br>error in displaySelection.jsp line  1071" );
          json = null;
        }
      }


      if( json != null )
      {
        fromSavedView = true;
        viewAttributeNames = LffUtility.parseJson( json, "rearrange_list_1" );

        if( viewAttributeNames != null && viewAttributeNames.length > 0 )
        {
          for( i = 0; i < viewAttributeNames.length; i++ )
          {
            savedDisplayNames.put( viewAttributeNames[ i ], "" + i );
          }

          attributeNames = LffUtility.parseJsonArray( json, "rearrange_list_1" );
          for( i = 0; i < attributeNames.length; i++ )
          {
            int order = i + 1;
            newDisplayOrder.put( attributeNames[ i ], "" + order );
          }
        }

        viewSortAttributeNames = LffUtility.parseJsonArray( json, "rearrange_list2" );
        ArrayList newSortOrderList = new ArrayList();
        if( viewSortAttributeNames != null )
        {
          int index = -1;
          for( int j = 0; j < viewSortAttributeNames.length; j++ )
          {
            index = viewSortAttributeNames[ j ].indexOf( "_sort" );
            if( index > 0 )
              viewSortAttributeNames[ j ] = viewSortAttributeNames[ j ].substring( 0, index );
            int order = j + 1;
            newSortOrder.put( viewSortAttributeNames[ j ] + "_sort", "" + order );

          }
          sortAttributeNames = viewSortAttributeNames;
          orderedSortNames = LffUtility.parseJson( json, "rearrange_list2" );

          if( orderedSortNames != null )
            for( i = 0; i < orderedSortNames.length; i++ )
            {
              savedSortNames.put( orderedSortNames[ i ], "y" );

              String order = "" + i;
              if( newSortOrder.get( orderedSortNames[ i ] ) != null )
                order = ( String )newSortOrder.get( orderedSortNames[ i ] );

              newSortOrder.put( orderedSortNames[ i ], order );
            }

        }
        String jsonGrpMode = null;
        if( json.has( "groupMode" ) )
          jsonGrpMode = json.getString( "groupMode" );

        if( jsonGrpMode != null && jsonGrpMode.equals( "terse" ) )
        {
          grpStatus = " checked ";
          terseStatus = " checked ";
          verboseStatus = "";
          radioDisabled = "";
        } else if( jsonGrpMode != null && jsonGrpMode.equals( "verbose" ) )
        {

          grpStatus = " checked ";
          terseStatus = "";
          verboseStatus = " checked ";
          radioDisabled = "";
        } else
        {
          radioDisabled = " disabled ";
          grpStatus = "";
          terseStatus = " checked ";
          verboseStatus = "";
        }
        grpMode = jsonGrpMode;

      } // json != null
      else
      {
        if( selectedView == null )
        {
          selectedView = " -- Create New Layout --";
          if( !createView )
            selectedView = LayoutHelper.DEFAULT_GROUPED_ANNOS;
        }
      }
    }
  }

  boolean hasTracks = false;
  if( selectedTrackNames != null && selectedTrackNames.length > 0 )
    hasTracks = true;

  if( selectedView == null )
    selectedView = LayoutHelper.DEFAULT_GROUPED_ANNOS;

  String jsonString = "";
  if( json == null )
  {
    if( !createView && selectedView != null && ( selectedView.equals( LayoutHelper.DEFAULT_ALL_ANNOS ) ) )
      jsonString = Util.htmlQuote( LayoutHelper.JSON_DF_ALL );

    if( !createView && selectedView != null && selectedView.equals( LayoutHelper.DEFAULT_GROUPED_ANNOS ) )
      jsonString = Util.htmlQuote( LayoutHelper.JSON_DF_GROUP );
  } else
    jsonString = json.toString();


  boolean isLayoutOwner = isAdmin;
  if( json != null )
  {
    if( json.has( "user" ) )
    {
      String tem = ( String )json.get( "user" );

      if( userInfo != null && userInfo[ 0 ] != null && tem.equals( userInfo[ 0 ] ) )
        isLayoutOwner = true;
    }

  }

////// / / / / delete view
  String deleteLayout = request.getParameter( "deleteLayoutTxt" );
//out.println("<br> debug1160 " + deleteLayout + " create view   " + createView   + "  view path " + viewPath +"  num views " +  viewNames.length );
  if( createView && deleteLayout != null && deleteLayout.length() > 0 )
  {
    if( isLayoutOwner )
    {

      if( LayoutHelper.deleteLayout( viewPath, deleteLayout, out ) )
        GenboreeMessage.setSuccessMsg( mys, "Layout \"" + selectedView + "\" was deleted successfully." );
      else
        GenboreeMessage.setErrMsg( mys, "Sorry, deletion of layout \"" + selectedView + "\" failed." );
    } else
    {
      GenboreeMessage.setErrMsg( mys, "Sorry, you don't have access rights to delete layout \"" + selectedView + "\"." +
              "  Either you must be the creator of this layout or you must be an administrator for this group." );
    }


    if( selectedView.equals( LayoutHelper.DEFAULT_GROUPED_ANNOS ) )
      json = new JSONObject( ( LayoutHelper.JSON_DF_GROUP ) );

    else if( selectedView.equals( LayoutHelper.DEFAULT_ALL_ANNOS ) )
      json = new JSONObject( ( LayoutHelper.JSON_DF_ALL ) );
    else
    {
      try
      {

        viewNames = LayoutHelper.retrieveExistingConfigs( viewPath );
      }
      catch( IOException e )
      {
        e.printStackTrace();
        viewNames = null;
      }
    }
    if( viewNames == null )
      viewNames = new String[]{ "-- &nbsp;Create New Layout &nbsp; -- ", LayoutHelper.DEFAULT_ALL_ANNOS, LayoutHelper.DEFAULT_GROUPED_ANNOS };
    else
    {
      String[] tempArr = new String[viewNames.length + 3];
      for( i = 0; i < viewNames.length; i++ )
        tempArr[ i + 3 ] = viewNames[ i ];
      tempArr[ 0 ] = "-- &nbsp;Create New Layout&nbsp; -- ";

      tempArr[ 1 ] = LayoutHelper.DEFAULT_GROUPED_ANNOS;
      tempArr[ 2 ] = LayoutHelper.DEFAULT_ALL_ANNOS;
      viewNames = tempArr;
      selectedView = "-- &nbsp;Create New Layout&nbsp; -- ";

    }
    fromSavedView = false;
  }


  if( attributeNames != null )
  {
    ArrayList newAttributeList = new ArrayList();
    HashMap newAttributeMap = new HashMap();

    for( i = 0; i < attributeNames.length; i++ )
    {
      if( dbAttributeNameMap.get( attributeNames[ i ] ) != null )
      {
        newAttributeList.add( attributeNames[ i ] );
        newAttributeMap.put( attributeNames[ i ], "y" );
      }
    }
    ArrayList newSortAttributeList = new ArrayList();
    HashMap newSortAttributeMap = new HashMap();
    for( i = 0; i < sortAttributeNames.length; i++ )
    {
      if( dbAttributeNameMap.get( sortAttributeNames[ i ] ) != null )
      {
        newSortAttributeList.add( sortAttributeNames[ i ] );
        newSortAttributeMap.put( sortAttributeNames[ i ], "y" );
      }
    }
    if( newAttributeMap.get( "\"Edit\" Link" ) == null )
    {
      newAttributeList.add( 0, "\"Edit\" Link" );
    }
    //   update new display names
    String[] dbattributeNames = ( String[] )dbAttributeNameMap.keySet().toArray( new String[dbAttributeNameMap.size()] );
    Arrays.sort( dbattributeNames );
    for( i = 0; i < dbattributeNames.length; i++ )
    {
      if( dbattributeNames[ i ].equals( "\"Edit\" Link" ) )
      {
        continue;
      }

      if( newAttributeMap.get( dbattributeNames[ i ] ) == null )
      {
        newAttributeList.add( dbattributeNames[ i ] );
      }

      if( newSortAttributeMap.get( dbattributeNames[ i ] ) == null )
      {
        newSortAttributeList.add( dbattributeNames[ i ] );
      }
    }

    attributeNames = ( String[] )newAttributeList.toArray( new String[newAttributeList.size()] );
    sortAttributeNames = ( String[] )newSortAttributeList.toArray( new String[newSortAttributeList.size()] );
  }

  String disabled = "";
  if( selectedChromosome != null && selectedChromosome.indexOf( "All Chromosome" ) >= 0 )
    disabled = " disabled ";

  String defaultIndex = "-1";
  if( selectedView != null && selectedView.indexOf( "Create New Layout" ) >= 0 )
    defaultIndex = "0";

  if( selectedView != null
          && selectedView.equals( LayoutHelper.DEFAULT_GROUPED_ANNOS ) )
    defaultIndex = "1";

  if( selectedView != null && selectedView.equals( LayoutHelper.DEFAULT_ALL_ANNOS ) )
    defaultIndex = "2";

  if( selectedView == null && !createView )
    defaultIndex = "1";
  if( selectedView == null && createView )
    defaultIndex = "0";

  //if (selectedView!= null && ( selectedView.equals(LayoutHelper.DEFAULT_ALL_ANNOS)  ||  selectedView.equals(LayoutHelper.DEFAULT_GROUPED_ANNOS) ) ){
  if( selectedChromosome != null && selectedChromosome.indexOf( "All Chromosome" ) >= 0 )
  {
    chrStart = "";
    chrStop = "";
  }
  //}

  if( chrStart == null )
    chrStart = "";

  if( chrStop == null )
    chrStop = "";


  if( viewNames != null )
  {
    String parentPath = org.genboree.upload.LffConstants.ROOTDIR_ANNOTATION_TABLE_VIEW + "/annoTableViews"
            + "/" + groupId + "/" + rseq_id;
    try
    {
      for( i = 0; i < viewNames.length; i++ )
      {
        if( viewNames[ i ].indexOf( "Create New" ) >= 0 )
          continue;

        if( viewNames[ i ].indexOf( LayoutHelper.DEFAULT_GROUPED_ANNOS ) >= 0 )
          json = new JSONObject( ( LayoutHelper.JSON_DF_GROUP ) );


        else if( viewNames[ i ].indexOf( LayoutHelper.DEFAULT_ALL_ANNOS ) >= 0 )
          json = new JSONObject( ( LayoutHelper.JSON_DF_ALL ) );
        else
        {
          json = LayoutHelper.retrievesJsonObject( parentPath, viewNames[ i ] );

        }
        if( json != null )
          name2json.put( viewNames[ i ], json.toString() );
      }
    }
    catch( ViewRetrieveException e )
    {
      //out.println("<br>  error in " + viewNames[i]);
      System.err.println( "error msg " + e.getMessage() );
      json = null;
    }
  }


  if( createView )
    mys.setAttribute( "createView", "true" );
  else
    mys.removeAttribute( "createView" );

  int numAttributeNames = 0;
  if( viewAttributeNames != null )
    numAttributeNames = attributeNames.length;

  String encodedview = "";
  if( selectedView != null )
    encodedview = Util.urlEncode( selectedView );
%>

