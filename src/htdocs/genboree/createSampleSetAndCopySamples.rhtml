
<%
# ---------------------------------------------------------------------------
# SETUP CONVENIENT ENVIRONMENT
# ---------------------------------------------------------------------------
require "cgi"
require "json"
require "net/http"
require "brl/util/util"
require "brl/genboree/genboreeContext"
require "brl/genboree/geneViewer/geneElementsUtil"
require "brl/genboree/geneViewer/gbTrackUtilNew.rb"
require "brl/genboree/rest/helpers/sampleApiUriHelper"
require "brl/genboree/rest/helpers/databaseApiUriHelper"

cgi = CGI.new()
apiHost = ENV["HTTP_HOST"]
@context = BRL::Genboree::GenboreeContext.new(cgi, ENV)
samples = cgi["samples"].split(/,/).map{|xx| CGI.unescape(xx)}
sampleSet = CGI.unescape(cgi['sampleSet'].to_s.strip)
userId = cgi["userId"];
sourceDb = cgi["sourceDb"];
@hostAuthMap = nil
if(!(userId.nil? or userId.empty?)) then
    userId = userId.to_i
    @hostAuthMap = Abstraction::User.getHostAuthMapForUserId(nil, userId)
end
dbHelper = BRL::Genboree::REST::Helpers::DatabaseApiUriHelper.new("")
dbHost = dbHelper.extractHost(sourceDb)
dbPath = dbHelper.extractPath(sourceDb)
dbQuery = URI.parse(sourceDb).query
 # First make a payload
        sampleEntityList = []
        samples.each { |sample|
            
            apiCaller = BRL::Genboree::REST::ApiCaller.new(dbHost, "#{dbPath}/sample/#{sample}?#{dbQuery}&detailed=true&format=json", @hostAuthMap)
            $stderr.puts apiCaller.rsrcPath
            apiCaller.get()
            if(apiCaller.succeeded?)
              retVal = JSON.parse(apiCaller.respBody)
              sampleEntityList.push(retVal['data'])
            else
              $stderr.debugPuts(__FILE__, __method__, "ERROR","ERROR:Unable to retrieve sample info for #{apiCaller.rsrcPath}")
            end
        }
        $stderr.puts sampleEntityList.inspect
        # Insert the samples
        apiCaller = ApiCaller.new(apiHost, "#{sampleSet}/samples?",@hostAuthMap)
        $stderr.puts apiCaller.rsrcPath
        payload = {'data' => sampleEntityList}
        apiCaller.put(payload.to_json)
        %>
<%= apiCaller.respBody %>
