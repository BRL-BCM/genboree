<% # THIS IS AN ERUBY FILE
########################################################################################
# Project: Query UI Integration
#   This project creates a User Interface (UI) to assist users in
#   creating parameter files for Query (v0.49), a data visualization tool.
#   The integration also creates a server-side support environment to create
#   necessary configuration files, queue a Query job with the Genboree environment
#   and then package the Query output files and notify the user of job completion.
#
# queryRequestHandler.rhtml - This file receives the request from the client UI to start a run of Query.
#   Here we ensure that the data is properly formatted, do some basic validation
#   and start off the run of Query (via forking the queryCoordinator.rb). After starting the
#   Query process, we return a message to the user alerting them they will be notified
#   via email when the process is complete and the results are read, MFS (BNI)
#
# Developed by Bio::Neos, Inc. (BIONEOS)
# under a software consulting contract for:
# Baylor College of Medicine (CLIENT)
# Copyright (c) 2009 CLIENT owns all rights.
# To contact BIONEOS, visit http://bioneos.com
########################################################################################

require 'json'
require 'cgi'
require 'brl/genboree/genboreeUtil'
require 'brl/genboree/rest/apiCaller'
include BRL::Genboree::REST

# Local variables
cgi = CGI.new()
mode = cgi["mode"] || ""
resource = cgi["resource"] || ""
genbConf = BRL::Genboree::GenboreeConfig.load()
queryScratchBase = genbConf.queryScratchBase
debugLogPath = ""

begin
  user = cgi["userLogin"].strip()
  passwd = cgi["passwd"].strip()
  group = cgi["group"].strip()
  db = cgi["db"].strip()

  if(mode == "qNameCheck")
    resp = {}
    value = cgi["value"]

    if(user.nil? or user.empty? or 
       passwd.nil? or passwd.empty? or 
       group.nil? or group.empty? or 
       db.nil? or db.empty?)

      resp["success"] = false
      resp["valid"] = false
      resp["reason"] = "A server error occurred! Required parameters were missing!"
    elsif(value.nil? or value.empty?)
      resp["success"] = true
      resp["valid"] = false
      resp["reason"] = "The query name cannot be blank"
    else
      # See if we can retrieve a Query resource for this name
      # success: true if server worked/false if the server returned and error
      # valid: true if name available/false if name is taken
      # If the API returns a Query for the supplied name, then taken [valid = false] else
      uri = "/REST/v1/grp/#{CGI.escape(group.strip())}/db/#{CGI.escape(db.strip())}/query/#{CGI.escape(value)}"
      apiCaller = ApiCaller.new(genbConf.apiHost || "localhost", uri, user, passwd)
      httpResp = apiCaller.get()
      if(httpResp.nil?)
        resp["success"] = false
        resp["valid"] = false
        resp["reason"] = "A server error occurred!"
      elsif(apiCaller.failed?() and httpResp.code == "404")
        resp["success"] = true
        resp["valid"] = true
      else
        resp["success"] = true
        resp["valid"] = false
        resp["reason"] = "This query name is not available"
      end
    end

    print JSON.generate(resp)
  end
rescue JSON::ParserError => e
  # If there was an error with the JSON, alert the user
  err = "<div class='failure'>"
  err << "An internal system error has occurred, please contact "
  err << "<a href='mailto:#{genbConf.gbTechEmail}'>#{genbConf.gbTechEmail}</a> for assistance.<br>\n"
  err << "<em>ERROR:</em> The received JSON data was malformed!<br>"
  err << "</div>"
  print err

  exit
rescue ArgumentError => e
  missingParams = Array.new
  missingParams << "userId" if cgi["userId"].nil? or cgi["userId"].to_s.empty?
  missingParams << "group" if targetGroup.nil? or targetGroup.empty?
  missingParams << "db" if targetDb.nil? or targetDb.empty?
  missingParams << "queryURI" if queryUri.nil? or queryUri.empty?
  missingParams << "targetURI" if targetUri.nil? or targetUri.empty?
  missingParams << "userLogin" if user.nil? or user.empty?
  missingParams << "password" if passwd.nil? or passwd.empty?
  err = "<div class='failure'>"
  err << "An internal system error has occurred, please contact "
  err << "<a href='mailto:#{genbConf.gbTechEmail}'>#{genbConf.gbTechEmail}</a> for assistance.<br>\n"
  err << "ERROR: Required parameters were missing!<br>\n#{missingParams.join("<br>\n")}<br>\n"
  err << "ERROR: gbDataFileRoot not set in genboree config file!<br>\n" if genbConf.gbDataFileRoot.nil?
  err << "</div>"
  print err

  exit
rescue Exception => e
  # Failsafe, if any other error occurs (perhaps with the fork?), alert the user
  err = "<div class='failure'>"
  err << "An internal system error has occurred, please contact "
  err << "<a href='mailto:#{genbConf.gbTechEmail}'>#{genbConf.gbTechEmail}</a> for assistance.<br>\n"
  err << "<em>ERROR:</em> An unknown error has occurred!#{e}<br>"
  err << "</div>"
  print err

  exit
end
%>
