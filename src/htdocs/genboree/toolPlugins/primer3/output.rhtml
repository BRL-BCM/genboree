<%
  require 'cgi'
  require 'brl/genboree/genboreeUtil'
  require 'brl/genboree/toolPlugins/util/util'
  require 'brl/util/textFileUtil'
  include BRL::Genboree
  include BRL::Genboree::ToolPlugins::Util
  include BRL::Genboree::ToolPlugins
    
  def prepForText() # We're dump html, true, but to an external ruby rhtml page (so just text)
      return if(@prepped4output)
      @req.headers_out['Content-Type'] = @req.content_type = 'text/plain'
      @req.headers_out['Accept-Ranges'] = 'bytes'
      @req.status = 200
      @req.send_http_header
      @prepped4output = true
      # Remove Apache buffering on the response object...else apache buffers until
      # the request is done. Generally we avoid this, but for D/L it can be good.
      @resp.sync_output = true
  end 
  
  # CGI/Apache variables
  cgi = CGI.new
  @prepped4output = false
  @req = Apache.request
  @resp = $stdout  
  @err = nil
  
  # Constants
  exts = [ 'p3cmd.gz', 'raw.gz', 'lff.gz' ]
  descs = [ 'Primer3 command file<BR>used for this job.', 'Raw Primer3 output file.', 'Primer3 output as LFF.' ]

  # Key global vars
  groupId = cgi['groupId'].to_i.untaint
  refSeqId = cgi['refSeqId'].to_i.untaint
  tool = cgi['tool'].strip.dup.untaint
  expname = cgi['expname'].strip.dup.untaint
  directDownload = cgi['download'].empty? ? false : true
  extension = cgi['ext'].empty? ? nil : cgi['ext'].strip.dup.untaint

  [ expname, tool ].each { |xx| xx.gsub!(/\.\./, '') ; xx.gsub!(/\\/, '') ; xx.gsub!(/\~/, ''); xx.gsub!(/\//, '_') } # Prevent path injection attacks, sort of.

	prepForText()
	
  # Locate the file(s) using the supplied info
  cleanExpName = expname.gsub( BAD_CHARS_RE, BAD_CHARS_REPLACEMENT )
  resultsFileBase = "#{RESULTS_PATH}/#{groupId}/#{refSeqId}/#{tool}/#{cleanExpName}"
  
  # Make sure we have what we need
 	if(groupId != 0 and refSeqId != 0 and !tool.empty? and !expname.empty?)
	 	
		# This output.rhtml either tries to display the results in-line
		# or provides a link (to itself) to provide the file directly, presumably for downloading)
	
		if(directDownload) # then user clicked a link to download the results directly
			resultsFileName = "#{resultsFileBase}.#{extension}"
			if(File::exists?(resultsFileName))
	    	reader = IO.popen( "gunzip -c #{resultsFileName.gsub(/ /, '\ ')}" )
	    	reader.each { |line| puts line }
	    	reader.close()
	    end
		else # display in-line if we can, else provide a link for direct download
		  # First, though, get params file
      inputs = BRL::Genboree::ToolPlugins::Tools::Primer3::Primer3Tool.functions()[:designPrimers][:input]
      paramsHash = BRL::Genboree::ToolPlugins::Util.loadParamData("#{resultsFileBase}")
      unless(paramsHash.nil?) # then no param file was found...oops, was it saved in your tool?
        # nil values are 'not set' for all params in this tool:
        paramsHash.each_key { |kk| paramsHash[kk] = '[ not set ]' if(paramsHash[kk].nil?) }
      end
%>
      <div id="results" name="results" style="padding:2px; margin-left:5px;margin-top:10px;height:200px;width:660px;overflow:auto;border:black 1px solid;">
        <B>Job Parameters:</B>
        <P>
        <table border="0" width="100%" cellspacing="5" cellpadding="0">
        <tr>
          <td><b>Parameter:</b></td><td><b>Value:</b></td>
        </tr>
<%
        unless(paramsHash.nil?)
          inputs.keys.sort{|aa,bb| inputs[aa][:paramDisplay] <=> inputs[bb][:paramDisplay]}.each { |kk|
            next if(inputs[kk][:paramDisplay] < 0)
%>
            <tr>
              <td>
                <NOBR><%=CGI.escapeHTML(inputs[kk][:desc].to_s)%></NOBR>
              </td>
              <td>
                <%=CGI.escapeHTML(paramsHash[kk].to_s)%>
              </td>
            </tr>
<%
          }
        else # no param file found
%>
          <tr>
            <td>
              <NOBR>No Parameters Saved For This Job!</NOBR>
            </td>
            <td>
              (Perhaps job was run under a previous Genboree release?)
            </td>
          </tr>
<%
        end
%>
        </table>
      </div>
      <P>
			<div id="results" name="results" style="white-space: nowrap ;padding:2px; margin-left:5px;margin-top:10px;width:660px;height:500px;overflow:auto;border:black 1px solid">
			<B>Job Output Files:</B>
        <P>
        <table cellspacing="5" cellpadding="5" border="0" width="100%">
        <tr>
        <td>
          <ul style="margin-left: 2em; padding-left: 2.5em; text-indent: -3.25em ; list-style-type: none;">
<%
          fcount = 0
          exts.each_index { |ii|
            ext = exts[ii]
            rFile = "#{resultsFileBase}.#{ext}"
            if(File::exists?(rFile))
              fcount += 1
%>            <li style="margin-bottom: 20px; ">
<%
              if((rFile =~ /\.gz$/ and BRL::Util::Gzip.empty?(rFile)) or (File.size(rFile) < 1)) # No output made!
%>
                <img src="/images/noDoc.png" width="15" height="18" border="0">&nbsp;<b><%=fcount%>. <%=descs[ii]%></b><br><font color="red">Error: the primer3 run generated <i>no</i> output, which shouldn't be possible.</font><br>- Even if your parameters generated no primers, you should get a new track with all the <u>failed templates</u>.<br>- Please contact <a href="mailto:genboree_admin@genboree.org?subject=Primer tool error">genboree_admin@genboree.org</a>.
<%            else %>
                <A HREF='<%="#{cgi.script_name}/?groupId=#{groupId}&refSeqId=#{refSeqId}&tool=#{CGI.escape(tool)}&expname=#{CGI.escape(expname)}&ext=#{CGI.escape(ext)}&download=#{directDownload.to_s}"%>'><img src="/images/docIcon1.png" width="15" height="18" border="0">&nbsp;<%=fcount%>. <%=descs[ii]%></A>
<%            end %>
              </li>
<%
            end
          }
%>
          </ul>
        </td>
        </tr>
        </table>
			</div>
<%
		end
	end
%>
