# ##############################################################################
# Main NGINX Config File.
# - Sub-ordinate configs added into this config via the "include" command live in ..../conf/
#
# NOTE: When matching "location" directives, generally the reg-exp based ones have priority
# and also the reg-exp ones are processed in order until one matches. You can change this
# so exact string matches or string matches that PREVENT further matching via reg-exp are performed
# for certain locations. Use the various prefixes for "location" to do this. Matching locations
# work like this:
#   1. Directives with the = prefix that match the query exactly. If found, searching stops.
#   2. All remaining directives with conventional strings. If this match used the ^~ prefix, searching stops.
#   3. Regular expressions, in order of definition in the configuration file, until one is found.
#   4. If #3 yielded a match, that result is used. Else the match from #2 is used.
#
# VARIABLES AVAILABLE.
# See http://wiki.codemongers.com/NginxHttpCoreModule#types for list of variables you have access to.
#
#
# NOTE: If you change this file, nginx can dynamically re-load it, without interrupting
# ongoing handling of requests by busy workers, can be done via [as root]:
#    kill -HUP `cat /usr/local/brl/local/nginx/logs/nginx.pid`
# Graceful shutdown:
#    kill -QUIT `cat /usr/local/brl/local/nginx/logs/nginx.pid`
# BUT MAKE SURE TO **TEST** YOUR nginx CONF FILE **FIRST**. "nginx -t -c <confFile> !!!!!!!!
# ##############################################################################

# User and Group to run as, where pid file goes and number of workers
user                genboree genboree;
pid                 /usr/local/brl/local/var/nginx.pid ;
worker_processes    4 ;

# Number of worker connections. 1024 is a good default
events {
    worker_connections    1024 ;
}

# Start the http module where we config http access.
http {
    # ============================ MIME conf
    include             /usr/local/brl/local/nginx/conf/mime.types;
    # Set a default type for the rare situation that nothing matches from the mimie-type include
    default_type        application/octet-stream ;
    # Set the default index files for directories. We recognize three possible index files:
    index               index.html index.rhtml index.jsp ;

    # ============================
    include   /usr/local/brl/local/etc/nginx/global_maps.conf ;

    # ============================ PROXY conf
    proxy_redirect          off ;
    proxy_connect_timeout   60 ;
    proxy_send_timeout      3600 ;
    proxy_read_timeout      3600 ;
    proxy_buffers           16    8k ;
    proxy_cache_path        /usr/local/brl/data/tmp/cache levels=2:2 keys_zone=respCache:512m max_size=5g inactive=10y loader_threshold=250 loader_files=100 loader_sleep=100 ;
    proxy_temp_path         /usr/local/brl/data/tmp/proxy_temp   1   2   3 ;
    proxy_next_upstream     error ;  # default also tries the next server if 'timeout'...let's not do that

    # ============================ GZIP conf
    # COMPRESSION. Output compression saves bandwidth
    gzip                on ;
    gzip_vary           on ;
    gzip_buffers        32   8k ;
    gzip_http_version   1.0 ;
    gzip_comp_level     6 ;
    gzip_proxied        any ;
    gzip_types          text/plain text/css text/javascript
                        image/png application/x-javascript text/xml
                        application/xml application/xml+rss
                        application/xhtml+xml application/x-httpd-eruby 
                        application/json text/x-yaml ;
    gzip_min_length     2k ;
    # Some browsers say they support gzipping when they don't
    gzip_disable "^Mozilla/4" ;
    gzip_disable "^Mozilla/4\.0[678]" ;
    gzip_disable "\bMSIE [1-6]\." ;

    # ============================ SSL conf
    ssl_certificate       /usr/local/brl/data/ssl/cert1.crt ;
    ssl_certificate_key   /usr/local/brl/data/ssl/cert1.key ;
    ssl_session_cache     shared:SSL_sess_cache:2m ;            # share ssl sessions between worker processes
    ssl_session_timeout   10m ;

    # ============================ LOGGING
    # Configure log format named "main"
    log_format        main    '$remote_addr - $remote_user [$time_local] "$request" '
                              '$status $body_bytes_sent "$http_referer" '
                              '"$http_user_agent" "$http_x_forwarded_for" '
                              ' [req_length: "$request_length"] (gzip ratio: "$gzip_ratio") (upstream: "$upstream_addr" respStatus:"$upstream_status" in $upstream_response_time sec)' ;

    access_log        /usr/local/brl/data/var/nginx_access.log   main ; # Error log using built-in logging format "debug" (also [ debug | info | notice | warn | error | crit ])
    error_log         /usr/local/brl/data/var/nginx_error.log    warn ; # Access log using "main" format

    # ============================ PERFORMANCE:
    server_tokens       off ;             # don't send nginx version numbers for error pages (security)
    sendfile            on ;              # allows use of sendfile(). Can increase overall performance during large data transfers without a context switch.
    tcp_nopush          on ;
    tcp_nodelay         on ;
    keepalive_timeout   15    10 ;        # 0 to disable connection keepalive/reuse (probably not good idea)
    server_names_hash_bucket_size   64 ;  # some virtual hosts need this (why??) # should use size of the line of cpu cache (cache_alignment)??
    client_header_buffer_size       32k;
    large_client_header_buffers     8   64k;
    client_body_buffer_size         2m ;
    client_body_temp_path           /usr/local/brl/local/tmp/nginx   1   2  ; # use 2 levels of sub-dirs to organize temp files
    client_max_body_size            50000m ; # 50gb file upload max, for example
    client_body_timeout             600 ;
    client_header_timeout           600 ;
    send_timeout                    60 ;

    # ============================ CORS
    # should be something like: add_header 'Access-Control-Allow-Origin' "$http_origin" always;
    add_header 'Access-Control-Allow-Origin' '*' always;
    add_header 'Access-Control-Allow-Credentials' 'true' always;
    add_header 'Access-Control-Allow-Methods' 'GET, PUT, POST, HEAD, OPTIONS' always;
    add_header 'Access-Control-Allow-Headers' 'Authorization,Accept,Origin,Keep-Alive,DNT,X-Mx-ReqToken,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,X-Forwarded-For' always;
    # OPTIONS requests are handled below

    # ============================ UPSTREAM SERVERS and SERVER CLUSTERS:
    upstream tomcat {  # [for proxy to Tomcat] referred to as http://tomcat in rules from here on
        server   127.0.0.1:8081 ;
    }

    upstream apache {  # for proxy to Genboree Apache] referred to as http://apache in rules from here on
        server   127.0.0.1:5001 ;
    }

    upstream thin_api {
        least_conn;
        __GENBOREE_NGINX_thinApiWorkersList__
    }

    upstream thin_redmine {
        __GENBOREE_NGINX_thinRedmineWorkersList__
    }

    upstream thin_website {  
        server    unix://usr/local/brl/local/var/thin_website.0.sock ;
    }
    # reserve 1MB under the name 'proxied' to track uploads
    upload_progress proxied 1m;

    # ============================ additional configuration from installed apps
    include /usr/local/brl/local/etc/conf/*.nginx_http;

    # ============================ default server - it catches all unknown requests
    server {
        listen 80 default_server;
        server_name _;
        root          /usr/local/brl/local/nginx/htdocs ;
        return 404;
    }

    # ============================ VIRTUAL HOST #1: HTTP Port 80 Server
    server {
        listen        80  rcvbuf=64K    backlog=128 ;   # "default": this is default virtual host; "rcvbuf": buffer incoming data; "backlog": max number of backlogged clients
        listen        443  ssl ;
        server_name   __GENBOREE_NGINX_allowedHostnames__ ; 
        server_name_in_redirect   off ;
        root          /usr/local/brl/local/nginx/htdocs ;

        include /usr/local/brl/local/etc/nginx/proxy_set_headers.conf ;

        # FIX "missing trailing /" ISSUES (i.e. DIRECTORY ACCESSES)
        #   - We'll do this for the 3 key index file types: indexFile = index.html, index.rhtml, index.jsp
        #   - Check for existence of $request_filename/{indexFile} (won't exist for actual files)
        #   - If its there on the filesystem then rewite the url to add {indexFile} to the end of it
        #     and do a permanent redirect back to browser (so it knows where to go, and so we can get a request
        #     whose internal links will be correct, else images and such may not be displayed)
        #   - Since filesystem will say /path//file.ext exists, but nginx and some other web servers will balk at
        #     a path like http://host.com/path//file.ext, we non-greedily match everything up to an optional terminal /
        #     and use the match to do the replacement.                                                              
        if (-f $request_filename/index.html) {
            rewrite   ^(.*?)/?$    $1/index.html  permanent ;
            break ;
        }
        if (-f $request_filename/index.rhtml) {
            rewrite   ^(.*?)/?$    $1/index.rhtml  permanent ;
            break ;
        }
        if (-f $request_filename/index.jsp) {
            rewrite   ^(.*?)/?$    $1/index.jsp  permanent ;
            break ;
        }

        # ERROR PAGE. Redirect server -error- pages to the static page /50x.html
        #   - exact string match. No regexp location matching will be done afterwards if this matches.
        error_page    500   502   503   504   /50x.html ;
        location = /50x.html {
            root    html ; # Where this location can be found. TODO: is this sub-ordinate to server.root above???? Actually at .../html/ in nginx home.
        }

        # SKIP/DENY. Deny access to .htaccess files, if Apache's document root overlaps with nginx's.
        #   - regexp match. Has priority over regular string matches. Searched in order
        location ~ /\.ht {
            deny    all;
        }

        # SERVE STATIC FILES. These files live in some top-level dirs in htdocs.
        #   - regexp match. Has priority over regular string matches. Searched in order.
        location ~ ^/(javaScripts|styles|images|graphics|cache|gallery|syntenyGIFS|webalizer_results/)   {
            expires 30d ;
        }

        # Upload form should be submitted to this location
        location ~ ^/genbUpload/.* {
            # Pass altered request body to this location
            upload_pass @internalupload;
            upload_pass_args on;  
            # Store files to this location
            upload_store /usr/local/brl/local/tmp/nginx/upload_temp 1 1;
            # Set specified fields in request body
            upload_set_form_field $upload_field_name.name "$upload_file_name";
            upload_set_form_field $upload_field_name.content_type "$upload_content_type";
            upload_set_form_field $upload_field_name.path "$upload_tmp_path";
            # Inform backend about hash and size of a file
            upload_aggregate_form_field "$upload_field_name.size" "$upload_file_size";
            upload_pass_form_field ".*";
            # upload_cleanup 400 404 499 500-505;
            track_uploads proxied 30s;
        }

        # Pass altered request body to a proxy
        location @internalupload {
            # this should strip off the leading upload dir
            # and then pass to the appropriate handler
            rewrite  ^/genbUpload/(.+)$ /$1 ;

            if ( $uri ~ ^/(?:(?:.+\.jsp.*)|(?:java-bin/servlets/.*)|(?:java-bin))$ )   {
                proxy_pass http://tomcat$uri?$query_string ;
                break ;
            }

            if ( $uri ~ ^/.+\.rhtml.*$ ) {
                proxy_pass http://apache$uri?$query_string ; 
                break;
            }
        }

        # Handle PUT for file data.
        # - This will arrange to leave the payload in a client body file nginx writes out.
        # - The location of that file will be passed along via the X-BODY-FILE HTTP header.
        # - The proxied request body will have some static message and is NOT RELEVANT.
        location @jumpToFileDataPut {
            client_body_in_file_only   on;
            client_body_temp_path  /usr/local/brl/local/tmp/thin ; # use thin's tmp path area directly
            proxy_set_header X-BODY-FILE $request_body_file;
            # Using proxy_set_header will WIPE ALL proxy_set_headers INHERITIED FROM OUTER SCOPES.
            # - Must restore any standard ones!
            include /usr/local/brl/local/etc/nginx/proxy_set_headers.conf ;
            proxy_set_body "[Stripped by nginx; payload is in a file. See X-BODY-FILE for location]" ;
            proxy_pass http://thin_api ;
            break ;
        }

        # Handle OPTIONS requests to /REST/ urls in this named location.
        # - This responds with CORS headers.
        location @jumpToOptionsRest {
            # To SUPPORT CORS, we MUST send back certain response headers in OPTIONS request.
            # Most are same as above, although there are a couple of extra ones.
            # - These headers are needed to tell the browser "hey this is a request for one of those supported CORS requests
            #   you already asked us about via OPTIONS"
            #
            # Tell client that this pre-flight info is valid for 20 days
            #
            add_header 'Access-Control-Max-Age' 7776000;
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;
            # Return success, but no-payload (204) for this kind of request.
            return 204;
        }

        # --------------------------------------------------------------------------
        # PROXIES. Pass certain things to appropriate upstream server/cluster.
        location ^~ /site {
            proxy_pass    http://thin_website ;
            break ;
        }

        rewrite ^(/attachments/download/.*)$  /redmine$1  permanent ;
        # .jsp files to Tomcat on port 8081 [regexp match. Has priority over regular string matches. Searched in order.]
        location ~ ^/(?:(?:.+\.jsp.*)|(?:java-bin/servlets/.*)|(?:java-bin))$   {
            proxy_pass    http://tomcat$request_uri ; # $request_uri is original URI with query string; $uri is rewritten URI, minus query string (available in $args)
        }

        # .rhtml to Apache on port 80. [regexp match. Has priority over regular string matches. Searched in order.]
        location ~ ^/.+\.rhtml.*$   {
            proxy_pass    http://apache$request_uri ; # $request_uri is original URI with query string; $uri is rewritten URI, minus query string (available in $args)
        #    track_uploads proxied 30s;  # - why? It is from upload progress
        }

        # report uploads tracked in the 'proxied' zone
        location ^~ /genbUploadProgress {
            upload_progress_java_output ;
            report_uploads proxied ;
        }

        # This location is very resource specific: file data
        location ~ ^/REST/[^/]+/grp/[^/]+/db/[^/]+/file/.+/data.*$ {
            # Set up a "named goto" so we can jump out to a config that will handle HTTP OPTIONS type requests.
            # - We do this by leveraging nginx's error_page redirection function which looks for certain return codes
            # - Note that nginx is fussy w.r.t. "if" statements and location...lots of little gotchas. Play at own risk.
            error_page 421 = @jumpToOptionsRest ;
            # - OPTIONS are how CORS pre-flight requests are done. So we assume OPTIONS means "check for CORS"
            if ($request_method = OPTIONS) {
                # Activate an immediate jump to the @jumpToOptionsRest location config (below)
                return 421 ;
            }

            # Set up a different "named goto" to jump to a config that will handle HTTP PUT type requests on file data.
            # - We do this by leveraging nginx's error_page redirection function which looks for certain return codes
            # - Note that nginx is fussy w.r.t. "if" statements and location...lots of little gotchas. Play at own risk.
            error_page 425 = @jumpToFileDataPut ;
            if ($request_method = PUT) {
                # Activate an immediate jump to the @jumpToFileDataPut location config (below)
                return 425 ;
            }

            # Else this is not OPTIONS nor PUT on file data, but one of other 4 HTTP methods. Our API server will take it from here.
            proxy_pass http://thin_api ;
            break ;
        }

        # [/REST/ to thin server cluster. [string match NOT to be followed by checking regexp rules]
        location ~ ^/REST {
            # Set up a "named goto" so we can jump out to a config that will handle HTTP OPTIONS type requests.
            # - We do this by leveraging nginx's error_page redirection function which looks for certain return codes
            # - Note that nginx is fussy w.r.t. "if" statements and location...lots of little gotchas. Play at own risk.
            error_page 421 = @jumpToOptionsRest ;
            # - OPTIONS are how CORS pre-flight requests are done. So we assume OPTIONS means "check for CORS"
            if ($request_method = OPTIONS) {
                # Activate an immediate jump to the @jumpToOptionsRest location config (below)
                return 421 ;
            }
        
            proxy_pass    http://thin_api ;
            break ;
        }

        # Redmine - Upload Request - KbDocs File Upload
        location = /redmine/genboree_kbs/collection/uploaddocs {
            client_body_buffer_size     8m ;
            client_body_temp_path       /usr/local/brl/local/tmp/nginx/client_file_upload   1   2   3 ; # use 3 levels to organize temp files
            client_body_in_file_only    on ;
            client_max_body_size        100000m ; # 100gb file upload max, for example
            include /usr/local/brl/local/etc/nginx/proxy_set_headers.conf ;
            proxy_set_header        X-GB-Uploaded-File    $request_body_file ;
            proxy_set_header        X-GB-Uploaded-Content-Type  $content_type ;
            proxy_set_header        X-GB-Saved-Uploaded   true ;
            proxy_set_header        Content-Type text/plain ;
            proxy_set_header        Connection close;
            proxy_hide_header       Etag ;
            proxy_set_body          "${request_body_file} ; ${content_type}" ;
            proxy_pass              http://thin_redmine ;
            proxy_redirect          off ;
            break ;
        }

        # Redmine - Upload Request - DB File Upload
        location = /redmine/genboree_kbs/doc/uploadfile {
            client_body_buffer_size         8m ;
            client_body_temp_path           /usr/local/brl/local/tmp/nginx/client_file_upload   1   2   3 ; # use 3 levels of sub-dirs to organize temp files
            client_body_in_file_only        on ;
            client_max_body_size            100000m ; # 100gb file upload max, for example
            include /usr/local/brl/local/etc/nginx/proxy_set_headers.conf ;
            proxy_set_header        X-GB-Uploaded-File    $request_body_file ;
            proxy_set_header        X-GB-Uploaded-Content-Type  $content_type ;
            proxy_set_header        X-GB-Saved-Uploaded   true ;
            proxy_set_header        Content-Type text/plain ;
            proxy_set_header        Connection close;
            proxy_hide_header       Etag ;
            proxy_set_body          "${request_body_file}  ; ${content_type}" ;
            proxy_pass              http://thin_redmine ;
            proxy_redirect          off ;
            break ;
        }

        rewrite ^/redmine$  /redmine/ permanent ;
        location ~ ^/redmine.*$ {
            proxy_pass    http://thin_redmine ;
            break ;
        }

        # ============================ additional configuration from installed apps
        include /usr/local/brl/local/etc/conf/*.nginx_server;

        # --------------------------------------------------------------------------
        # LOW-PRIORITY DIR ALIAS.
        #   - if no regexps (at all) and no exact string matches above match, then consider this string location match
        #     and set actual location if it matches.
        location /java-bin/ {
            alias /usr/local/brl/local/nginx/htdocs/webapps/java-bin/ ;
        }

        # Configure root / location. Can decide to proxy things to other web servers, etc.
        #   - regular string match. this is like a default config...most other locations will have priority over this.
        location / {
            # any default manipulations/tests here
        }

    } # end of server
    
  # ----------------------------------------------------------------------------
  # VIRTUAL HOST: HTTP Port 15505 Proxy Caching Server
  server {
    listen        15505    default   rcvbuf=64K    backlog=128 ;   # "default": this is default virtual host; "rcvbuf": buffer incoming data; "backlog": max number of backlogged clients
    server_name   localhost ;                   # matches *.genboree.org and genboree.org
    server_name_in_redirect   off ;
    root          htdocs ;

    # ERROR PAGE. Redirect server -error- pages to the static page /50x.html
    #   - exact string match. No regexp location matching will be done afterwards if this matches.
    error_page    500   502   503   504   /50x.html ;
    location = /50x.html {
      root    html ; # Where this location can be found. TODO: is this sub-ordinate to server.root above???? Actually at .../html/ in nginx home.
    }

    # SKIP/DENY. Deny access to .htaccess files, if Apache's document root overlaps with nginx's.
    #   - regexp match. Has priority over regular string matches. Searched in order
    location ~ /\.ht {
      deny    all;
    }

    # --------------------------------------------------------------------------
    # PROXIES. Pass certain things to appropriate upstream cached server
    location ~ ^/([^/]+)/(.*)$ {
      error_page 301 302 =200 @redirect ;
      include /usr/local/brl/local/etc/nginx/caching_proxy_settings.conf ;

      # Getting nginx NOT to cache HEAD is hard...using proxy_cache_methods won't do it like you would expect.
      if ($request_method = HEAD ) {
         set $dont_cache_head 1 ;
      }
      if ($request_method != HEAD ) {
         set $dont_cache_head 0 ;
      }     

      rewrite_log on ;

      # Do the actual proxying request
      proxy_pass http://$1/$2$is_args$args ;

      break ;
    }
    location @redirect {
      set $newLocation $upstream_http_location ;
      include /usr/local/brl/local/etc/nginx/caching_proxy_settings.conf ;

      proxy_pass $newLocation ;
      break ;
    }
  }
    
} # end if http
